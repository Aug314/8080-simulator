


* 2  2022.07.26  
#2  23:25    (lisp-interaction-mode)
(defun init ()
  "Binary numbers in the registers are in Big Endian format. Also BE in memory."
  (setq A [1 0 1 0 1 0 1 0])
  (setq B [1 0 1 1 1 0 1 1])
  (setq C [1 1 0 0 1 1 0 0])
  (setq D [1 1 0 1 1 1 0 1])
  (setq E [1 1 1 0 1 1 1 0])
  (setq F [0 0 0 0 0 0 0 0])
  (setq H [0 0 1 0 0 0 0 0])
  (setq L [0 0 1 1 1 1 0 0])
  (setq SP [0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1])   ;3FFD
  (setq PC [0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0])   ;4100
  ;(set-overflow-flag)
					; memory
  (setq memory
    '(
      ("1F23" . [0 1 0 0 0 0 1 1])
      ;("1F24" . [0 1 0 1 0 1 1 0])
      ("1F24" . [1 1 1 0 1 1 1 1])
      ("2000" . [0 0 0 0 0 1 0 1])
      ("2001" . [0 0 1 1 0 0 1 0])
      ("2002" . [0 1 1 0 1 1 1 1])
      ("2039" . [0 0 0 0 0 0 0 0])
      ("203A" . [0 1 0 0 0 0 1 0])
      ("203B" . [0 0 0 0 0 0 0 0])
      ("203C" . [1 1 1 1 0 0 1 1])
      ("203D" . [0 0 1 1 1 0 0 1])
      ("203E" . [0 0 1 0 0 1 1 1])
      ("34F3" . [0 0 0 1 0 1 1 1])
      ;("4000" . [1 0 0 1 0 1 1 1])    ; 97 : SUB A
      ;("4001" . [0 0 1 0 0 0 0 1])    ; 21aa : LXI H, aa
      ;("4002" . [0 1 1 0 1 1 1 1])    ; a = 6F
      ;("4003" . [0 0 1 1 0 0 1 0])    ; a = 32
      ;("4004" . [1 0 0 0 0 1 1 0])    ; 86 : ADD M
      ;("4005" . [0 0 1 0 0 0 1 1])    ; 23 : INX H
      ;("4006" . [1 1 0 0 0 0 1 1])    ; C3ss: JMP ss
      ;("4007" . [0 0 0 0 0 1 0 0])    ; s* = 04
      ;("4008" . [0 1 0 0 0 0 0 0])    ; s = 40
      ;("4000" . [1 0 0 1 0 1 1 1])     ; 97 : SUB A
      ;("4001" . [0 0 1 0 0 0 0 1])     ; 21aa : LXI H, aa
      ;("4002" . [0 1 1 0 1 1 1 1])     ; a = 6F
      ;("4003" . [0 0 1 1 0 0 1 0])     ; a = 32
      ;("4004" . [0 0 0 0 0 1 1 0])     ; 06 : MVI B, 05
      ;("4005" . [0 0 0 0 0 1 0 1])     ; <05>
      ;("4006" . [1 0 0 0 0 1 1 0])     ; 86 : ADD M
      ;("4007" . [0 0 1 0 0 0 1 1])     ; 23 : INX H
      ;("4008" . [0 0 0 0 0 1 0 1])     ; 05 : DCR B
      ;("4009" . [1 1 0 0 0 0 1 0])     ; C2 : JNZ sS
      ;("400A" . [0 0 0 0 0 1 1 0])     ; s = 06
      ;("400B" . [0 1 0 0 0 0 0 0])     ; S = 40
      ;("4000" . [1 0 0 1 0 1 1 1])     ; 97 : SUB A
      ;("4001" . [0 0 1 0 0 0 0 1])     ; 21aa : LXI H, aa
      ;("4002" . [0 1 1 0 1 1 1 1])     ; a = 6F
      ;("4003" . [0 0 1 1 0 0 1 0])     ; a = 32
      ;("4004" . [0 0 0 0 0 1 1 0])     ; 06i : MVI B, i
      ;("4005" . [0 0 0 0 0 1 0 1])     ; i = 05
      ;("4006" . [0 1 0 0 1 1 1 1])     ; 4F : MOV C, A
      ;("4007" . [0 1 1 1 1 0 0 0])     ; 78 : MOV A, B
      ;("4008" . [1 1 1 1 1 1 1 0])     ; FE : CPI i
      ;("4009" . [0 0 0 0 0 0 0 0])     ; i = 00
      ;("400A" . [0 1 1 1 1 0 0 1])     ; 79 : MOV A, C
      ;("400B" . [1 1 0 0 1 0 1 0])     ; CA dD : JZ dD
      ;("400C" . [0 0 0 1 0 1 0 0])     ; d = 14
      ;("400D" . [0 1 0 0 0 0 0 0])     ; D = 40
      ;("400E" . [1 0 0 0 0 1 1 0])     ; 86 : ADD M
      ;("400F" . [0 0 1 0 0 0 1 1])     ; 23 : INX H
      ;("4010" . [0 0 0 0 0 1 0 1])     ; 05 : DCR B
      ;("4011" . [1 1 0 0 0 0 1 1])     ; C3 sS : JMP sS
      ;("4012" . [0 0 0 0 0 1 1 0])     ; s = 06
      ;("4013" . [0 1 0 0 0 0 0 0])     ; S = 40 ; Ss = 4006
      ;("4000" . [1 0 1 0 0 1 1 1])      ; A7 : ANA A
      ;("4001" . [1 1 1 0 0 0 1 0])      ; E2 nN : JNO nN
      ;("4002" . [0 0 0 0 0 1 0 1])      ; n = 05
      ;("4003" . [0 1 0 0 0 0 0 0])      ; N = 40
      ;("4004" . [0 0 1 1 1 1 1 1])      ; 3F : CMC
      ;("4005" . [1 1 1 1 0 0 1 0])      ; F2 nN : JP nN
      ;("4006" . [0 0 0 0 1 0 0 1])      ; n = 09
      ;("4007" . [0 1 0 0 0 0 0 0])      ; N = 40
      ;("4008" . [0 0 1 1 1 1 1 1])      ; 3F : CMC
      ;("4009" . [0 0 0 0 0 0 0 0])      ; 00 : NOP
      ;("4000" . [1 1 0 0 0 1 0 1])       ; C5 : PUSH B  :: SUBROUT
      ;("4001" . [1 1 0 1 0 1 0 1])       ; D5 : PUSH D
      ;("4002" . [1 1 1 0 0 1 0 1])       ; E5 : PUSH H
      ;("4003" . [0 0 1 1 1 0 1 0])       ; 3A nN : LDA SIZE
      ;("4004" . [0 0 0 0 0 0 0 0])       ; n = 00
      ;("4005" . [0 0 1 0 0 0 0 0])       ; N = 20
      ;("4006" . [0 1 0 0 0 1 1 1])       ; 47 : MOV B, A
      ;("4007" . [1 0 0 1 0 1 1 1])       ; 97 : SUB A
      ;("4008" . [0 0 1 0 1 0 1 0])       ; 2A nN : LHLD ARYADR
      ;("4009" . [0 0 0 0 0 0 0 1])       ; n = 01
      ;("400A" . [0 0 1 0 0 0 0 0])       ; N = 20
      ;("400B" . [0 1 0 0 1 1 1 1])       ; 4F : MOV C, A :: LOOP
      ;("400C" . [0 1 1 1 1 0 0 0])       ; 78 : MOV A, B
      ;("400D" . [1 1 1 1 1 1 1 0])       ; FE n : CMI n
      ;("400E" . [0 0 0 0 0 0 0 0])       ; n = 00
      ;("400F" . [0 1 1 1 1 0 0 1])       ; 79 : MOV A, C
      ;("4010" . [1 1 0 0 1 0 1 0])       ; CA nN : JZ EXIT
      ;("4011" . [0 0 1 0 0 1 0 1])       ; n = 25
      ;("4012" . [0 1 0 0 0 0 0 0])       ; N = 40
      ;("4013" . [1 0 0 0 0 1 1 0])       ; 86 : ADD M
      ;("4014" . [1 1 1 0 1 0 1 0])       ; EA nN : JO ERROR
      ;("4015" . [0 0 1 0 0 0 0 0])       ; n = 20
      ;("4016" . [0 1 0 0 0 0 0 0])       ; N = 40
      ;("4017" . [0 0 0 0 0 1 0 1])       ; 05 : DCR B
      ;("4018" . [0 0 1 0 0 0 1 1])       ; 23 : INX H
      ;("4019" . [1 1 0 0 0 0 1 1])       ; C3 nN : JMP LOOP
      ;("401A" . [0 0 0 0 1 0 1 1])       ; n = 0B
      ;("401B" . [0 1 0 0 0 0 0 0])       ; N = 40
      ;("4020" . [0 0 1 1 1 1 1 0])       ; 3E n : MVI A, n   :: ERROR
      ;("4021" . [0 0 0 0 0 0 0 1])       ; n = 01
      ;("4022" . [0 0 1 1 0 0 1 0])       ; 32 nN : STA OVFLAG
      ;("4023" . [0 0 1 0 0 0 1 1])       ; n = 23
      ;("4024" . [0 0 0 1 1 1 1 1])       ; N = 1F
      ;("4025" . [1 1 1 0 0 0 0 1])       ; E1 : POP H  :: EXIT
      ;("4026" . [1 1 0 1 0 0 0 1])       ; D1 : POP D
      ;("4027" . [1 1 0 0 0 0 0 1])       ; C1 : POP B
      ;("4028" . [1 1 0 0 1 0 0 1])       ; C9 : RET
      ;("5000" . [1 1 0 0 1 1 0 1])       ; CD nN : CALL SUBROUTE
      ;("5001" . [0 0 0 0 0 0 0 0])       ; n = 00
      ;("5002" . [0 1 0 0 0 0 0 0])       ; N = 40
      ;("5003" . [0 0 0 0 0 0 0 0])       ; 00 : NOP
      ("6F32" . [0 0 0 0 0 0 1 0])
      ("6F33" . [0 0 0 0 0 0 1 1])
      ("6F34" . [0 0 0 0 0 1 0 0])
      ("6F35" . [0 0 0 0 0 1 0 1])
      ("6F36" . [0 0 0 0 0 1 1 0])
      ("6F37" . [0 0 0 0 0 1 1 1])
    )
  )
  (setq instruction-size (make-vector 256 1))      ; the size should be measured in bytes
  (aset instruction-size 1 3)
  (aset instruction-size 6 2)
  (aset instruction-size 14 2)
  (aset instruction-size 17 3)
  (aset instruction-size 22 2)
  (aset instruction-size 30 2)
  (aset instruction-size 33 3)
  (aset instruction-size 34 3)
  (aset instruction-size 38 2)
  (aset instruction-size 42 3)
  (aset instruction-size 46 2)
  (aset instruction-size 49 3)
  (aset instruction-size 50 3)
  (aset instruction-size 54 2)
  (aset instruction-size 58 3)
  (aset instruction-size 62 2)
  (aset instruction-size 194 3)
  (aset instruction-size 195 3)
  (aset instruction-size 196 3)
  (aset instruction-size 198 2)
  (aset instruction-size 202 3)
  (aset instruction-size 204 3)
  (aset instruction-size 205 3)
  (aset instruction-size 206 2)
  (aset instruction-size 210 3)
  (aset instruction-size 211 2)
  (aset instruction-size 212 3)
  (aset instruction-size 214 2)
  (aset instruction-size 218 3)
  (aset instruction-size 220 3)
  (aset instruction-size 222 2)
  (aset instruction-size 226 3)
  (aset instruction-size 228 3)
  (aset instruction-size 230 2)
  (aset instruction-size 234 3)
  (aset instruction-size 236 3)
  (aset instruction-size 238 2)
  (aset instruction-size 242 3)
  (aset instruction-size 244 3)
  (aset instruction-size 246 2)
  (aset instruction-size 250 3)
  (aset instruction-size 252 3)
  (aset instruction-size 254 2)
)
; end init
(RAM-access "400A")


(defun RAM-access (address)
  (if (assoc address memory)
    (cdr (assoc address memory))  ; THEN
    [0 0 0 0 0 0 0 0]             ; ELSE: default
  )
)

(defun RAM-store (key value)
  (setq memory (assoc-storeS key value memory))
)

(defun instruction (hexV)
  "Big Endian (i.e., OP code first; also, binary numbers (n) are in Big Endian format)"
  (let (hexdit1 hexdit2 hexdit3 hexdit4)
    (setq hexdit1 (aref hexV 0))
    (setq hexdit2 (aref hexV 1))
    (cond
      ((= hexdit1 0)           ; 0_
        (cond
	  ((= hexdit2 0)                   ; 00 : NOP
            (y-or-n-p "NOP")
	  )
	  ((= hexdit2 1)                   ; 01 : LXI B, nn
	    (y-or-n-p "LXI B, nn")
	    (let (hexdit3 hexdit4 hexdit5 hexdit6)       ; not swapped order, because it is immediate, not an address
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq hexdit5 (aref hexV 4))
	      (setq hexdit6 (aref hexV 5))
	      (setq B (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq C (hexadecimal-to-binary-BE (vector hexdit5 hexdit6)))
	    )
	  )
	  ((= hexdit2 2)                   ; 02 : STAX B        [LD (BC), A]
            (y-or-n-p "STAX B")
	    (let (address storee)
	      (setq storee (copy-vector A))
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE B) (binary-to-hexadecimal-BE C))))
	      (RAM-store address storee)
	    )
	  )
	  ((= hexdit2 3)                   ; 03 : INX B
	    (let (BC)
	      (y-or-n-p "INX B: Increment BC by 1.")
	      (setq BC (concatenate-vectors B C))
	      (setq BC (increment-double-byte-BE BC))
	      (setq B (project-first-byte-from-double-byte BC))
	      (setq C (project-second-byte-from-double-byte BC))	   
	    )
	  )
	  ((= hexdit2 4)                   ; 04 : INR B
            (y-or-n-p "INR B")
            (setq B (increment-byte-BE (copy-vector B)))
	  )
	  ((= hexdit2 5)                   ; 05 : DCR B
	    (y-or-n-p "DCR B")
            (setq B (decrement-byte-BE (copy-vector B)))
	  )
	  ((= hexdit2 6)                   ; 06 : MVI B, n
	    (y-or-n-p "MVI B, n")
	    (let (hexdit3 hexdit4)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq B (concatenate-vectors (hex-digit-to-binary-BE hexdit3) (hex-digit-to-binary-BE hexdit4)))
	    )
	  )
	  ((= hexdit2 7)                   ; 07 : RLC
	    (y-or-n-p "RLC")
	    (rotate-left-circular-BE)
	  )
	  ((= hexdit2 9)                   ; 09 : DAD B        [ADD HL, BC]
	    (y-or-n-p "DAD B")
	    (let (HL BC sum)
              (setq BC (concatenate-vectors B C))
	      (setq HL (concatenate-vectors H L))
	      (setq sum (add-double-bytes-BE HL BC))
	      (setq H (project-first-byte-from-double-byte sum))
	      (setq L (project-second-byte-from-double-byte sum))
	    )
	  )
	  ((= hexdit2 10)                  ; 0A : LDAX B   [LD A, (BC)]
	    (y-or-n-p "LDAX B")
	    (let (address extraction)
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE B) (binary-to-hexadecimal-BE C))))
	      (setq extraction (RAM-access address))
	      (setq A extraction)
	    )
	  )
	  ((= hexdit2 11)                  ; 0B : DCX B
	    (let (BC)
	      (y-or-n-p "DCX B")
	      (setq BC (concatenate-vectors B C))
	      (setq BC (decrement-double-byte-BE BC))
	      (setq B (project-first-byte-from-double-byte BC))
	      (setq C (project-second-byte-from-double-byte BC))	   
	    )
	  )
	  ((= hexdit2 12)                  ; 0C : INR C
            (y-or-n-p "INR C")
            (setq C (increment-byte-BE (copy-vector C)))
	  )
	  ((= hexdit2 13)                  ; 0D : DCR C
            (y-or-n-p "DCR C")
            (setq C (decrement-byte-BE (copy-vector C)))
	  )
	  ((= hexdit2 14)                  ; 0E n : MVI C, n
            (y-or-n-p "MVI C, n")
	    (let (hexdit3 hexdit4)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq C (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	    )
	  )
	  ((= hexdit2 15)                  ; 0F : RRC
	    (y-or-n-p "RRC")
	    (rotate-right-circular-BE)
	  )
	)
      )
      ((= hexdit1 1)            ; 1_
        (cond
	  ((= hexdit2 1)                   ; 11 : LXI D, nn         [LD DE, nn]
            (y-or-n-p "LXI D, nn")
	    (let (hexdit3 hexdit4 hexdit5 hexdit6)       ; not swapped order, because it is immediate, not an address
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq hexdit5 (aref hexV 4))
	      (setq hexdit6 (aref hexV 5))
	      (setq D (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq E (hexadecimal-to-binary-BE (vector hexdit5 hexdit6)))
	    )
	  )
	  ((= hexdit2 2)                   ; 12 : STAX D        [LD (DE), A]
            (y-or-n-p "STAX D")
	    (let (address storee)
	      (setq storee (copy-vector A))
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE D) (binary-to-hexadecimal-BE E))))
	      (RAM-store address storee)
	    )
	  )
	  ((= hexdit2 3)                   ; 13 : INX D
	    (let (DE)
	      (y-or-n-p "INX B: Increment BC by 1.")
	      (setq DE (concatenate-vectors D E))
	      (setq DE (increment-double-byte-BE DE))
	      (setq D (project-first-byte-from-double-byte DE))
	      (setq E (project-second-byte-from-double-byte DE))	   
	    )
	  )
	  ((= hexdit2 4)                   ; 14 : INR D
            (y-or-n-p "INR D")
            (setq D (increment-byte-BE (copy-vector D)))
	  )
	  ((= hexdit2 5)                   ; 15 : DCR D
            (y-or-n-p "DCR D")
            (setq D (decrement-byte-BE (copy-vector D)))
	  )
	  ((= hexdit2 6)                   ; 16 : MVI D, n
            (y-or-n-p "MVI D, n")
	    (let (hexdit3 hexdit4)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq D (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	    )
	  )
	  ((= hexdit2 7)                   ; 17 : RAL
	    (y-or-n-p "RAL")
	    (rotate-left-BE)
	  )
	  ((= hexdit2 9)                   ; 19 : DAD D        [ADD HL, DE]
            (y-or-n-p "DAD D")
	    (let (HL DE sum)
              (setq DE (concatenate-vectors D E))
	      (setq HL (concatenate-vectors H L))
	      (setq sum (add-double-bytes-BE HL DE))
	      (setq H (project-first-byte-from-double-byte sum))
	      (setq L (project-second-byte-from-double-byte sum))
	    )
	  )
	  ((= hexdit2 10)                  ; 1A : LDAX D        [LD A, (DE)]
            (y-or-n-p "LDAX D")
	    (let (address extraction)
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE D) (binary-to-hexadecimal-BE E))))
	      (setq extraction (RAM-access address))
	      (setq A extraction)
	    )
	  )
	  ((= hexdit2 11)                  ; 1B : DCX D
            (let (DE)
	      (y-or-n-p "DCX D")
	      (setq DE (concatenate-vectors D E))
	      (setq DE (decrement-double-byte-BE DE))
	      (setq D (project-first-byte-from-double-byte DE))
	      (setq E (project-second-byte-from-double-byte DE))	   
	    )
	  )
	  ((= hexdit2 12)                  ; 1C : INR E
            (y-or-n-p "INR E")
            (setq E (increment-byte-BE (copy-vector E)))
	  )
	  ((= hexdit2 13)                  ; 1D : DCR E
            (y-or-n-p "DCR E")
            (setq E (decrement-byte-BE (copy-vector E)))
	  )
	  ((= hexdit2 14)                  ; 1E n : MVI E, n
            (y-or-n-p "MVI E, n")
	    (let (hexdit3 hexdit4)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq E (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	    )
	  )
	  ((= hexdit2 15)                  ; 1F : RAR
	    (y-or-n-p "RAR")
	    (rotate-right-BE)
	  )
        )
      )
      ((= hexdit1 2)            ; 2_
        (cond
	  ((= hexdit2 1)          ; 21 : LXI H, nn
	    (y-or-n-p "LXI H, nn")
	    (let (hexdit3 hexdit4 hexdit5 hexdit6)       ; not swapped order, because it is immediate, not an address
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq hexdit5 (aref hexV 4))
	      (setq hexdit6 (aref hexV 5))
	      (setq H (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq L (hexadecimal-to-binary-BE (vector hexdit5 hexdit6)))
	    )
	  )
	  ((= hexdit2 2)          ; 22 nN : SHLD nN       [LD (nn), HL]
            (let (hexdit3 hexdit4 hexdit5 hexdit6 address hex0V)
	      (y-or-n-p "SHLD nN")
	      (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq hexdit5 (aref hexV 4))
	      (setq hexdit6 (aref hexV 5))
	      (setq address (present-hexadecimal-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))     ; swapped format
	      (RAM-store address (copy-vector L))
	      (setq hex0V (vector hexdit5 hexdit6 hexdit3 hexdit4))
	      (y-or-n-p (concat "hex0V = " (numerical-vector-to-string hex0V)))
	      (setq hex0V (add-double-bytes-hexadecimal-BE hex0V [0 0 0 1]))
	      (y-or-n-p (concat "hex0V = " (numerical-vector-to-string hex0V)))
	      (setq address (present-hexadecimal-BE hex0V))
	      (y-or-n-p (concat "address = " address))
	      (RAM-store address (copy-vector H))
	      (y-or-n-p (concat "(" address ") = " (numerical-vector-to-string (RAM-access address))))
	    )
	  )
	  ((= hexdit2 3)          ; 23 : INX H
	    (y-or-n-p "INX H")
	    (let (HL)
              (setq HL (concatenate-vectors H L))
	      (setq HL (increment-double-byte-BE HL))
	      (setq H (project-first-byte-from-double-byte HL))
	      (setq L (project-second-byte-from-double-byte HL))
	    )
	  )
	  ((= hexdit2 4)          ; 24 : INR H
            (y-or-n-p "INR H")
            (setq H (increment-byte-BE (copy-vector H)))
	  )
	  ((= hexdit2 5)          ; 25 : DCR H
            (y-or-n-p "DCR H")
            (setq H (decrement-byte-BE (copy-vector H)))
	  )
	  ((= hexdit2 6)          ; 26 : MVI H, n
            (y-or-n-p "MVI H, n")
	    (let (hexdit3 hexdit4)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq H (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	    )
	  )
	  ((= hexdit2 9)          ; 29 : DAD H        [ADD HL, HL]
            (y-or-n-p "DAD H")
	    (let (HL sum)
	      (setq HL (concatenate-vectors H L))
	      (setq sum (add-double-bytes-BE HL HL))
	      (setq H (project-first-byte-from-double-byte sum))
	      (setq L (project-second-byte-from-double-byte sum))
	    )
	  )
	  ((= hexdit2 10)         ; 2A : LHLD nN        [HL <- (nN)]
	    (let (hexdit3 hexdit4 hexdit5 hexdit6 address extraction)
	      (y-or-n-p "LHLD nN")
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq hexdit5 (aref hexV 4))
	      (setq hexdit6 (aref hexV 5))
	      (y-or-n-p (numerical-vector-to-string (vector hexdit5 hexdit6 hexdit3 hexdit4)))
	      (setq address (present-hexadecimal-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))     ; swapped format
	      (y-or-n-p (concat "258. address = " address))
	      (setq extraction (RAM-access address))
	      (y-or-n-p (concat "260. extraction = " (numerical-vector-to-string extraction)))
	      (setq L extraction)
	      (y-or-n-p (concat "262. L = " (numerical-vector-to-string L)))
	      (setq address (present-hexadecimal-BE (add-double-bytes-hexadecimal-BE (vector hexdit5 hexdit6 hexdit3 hexdit4) [0 0 0 1])))
	      (y-or-n-p (concat "264. address = " address))
	      (setq extraction (RAM-access address))
	      (y-or-n-p (concat "266. extraction = " (numerical-vector-to-string extraction)))
	      (setq H extraction)
	      (y-or-n-p (concat "268. H = " (numerical-vector-to-string H)))
	    )
	  )
	  ((= hexdit2 11)            ; 2B : DCX H
            (let (HL)
	      (y-or-n-p "DCX H")
	      (setq HL (concatenate-vectors H L))
	      (setq HL (decrement-double-byte-BE HL))
	      (setq H (project-first-byte-from-double-byte HL))
	      (setq L (project-second-byte-from-double-byte HL))	   
	    )
	  )
	  ((= hexdit2 12)            ; 2C : INR L
            (y-or-n-p "INR L")
            (setq L (increment-byte-BE (copy-vector L)))
	  )
	  ((= hexdit2 13)            ; 2D : DCR L
            (y-or-n-p "DCR L")
            (setq L (decrement-byte-BE (copy-vector L)))
	  )
	  ((= hexdit2 14)            ; 2E : MVI L, n
	    (y-or-n-p "MVI L, n")
	    (let (hexdit3 hexdit4)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq L (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	    )
	  )
	  ((= hexdit2 15)            ; 2F : CMA
	    (y-or-n-p "CMA: Apply one's complement to the accumulator. No flags are affected.")
	    (setq A (ones-complement A))
	  )
	)
      )
      ((= hexdit1 3)        ; 3_
        (cond
	  ((= hexdit2 1)            ; 31 : LXI SP, nn
	    (y-or-n-p "LXI SP, nn")
	    (let (hexdit3 hexdit4 hexdit5 hexdit6 vect)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq hexdit5 (aref hexV 4))
	      (setq hexdit6 (aref hexV 5))
	      (setq vect (vector hexdit3 hexdit4 hexdit5 hexdit6))
	      (y-or-n-p (concat "vect = " (numerical-vector-to-string vect)))
	      (setq SP (hexadecimal-to-binary-BE vect))
	    )
	  )
	  ((= hexdit2 2)          ; 32 : STA nN
	    (y-or-n-p "STA nN: Store register A into the location in memory addressed by nN.")
	    (let (hexdit3 hexdit4 hexdit5 hexdit6 address)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq hexdit5 (aref hexV 4))
	      (setq hexdit6 (aref hexV 5))
	      (setq address (present-hexadecimal-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))       ; swapped order
	      (RAM-store address (copy-vector A))
	    )
	  )
	  ((= hexdit2 3)          ; 33 : INX SP
	      (y-or-n-p "INX SP")
	      (setq SP (increment-double-byte-BE SP))
	  )
	  ((= hexdit2 4)          ; 34 : INR M
            (y-or-n-p "INR M")
	    (let (address bytebinV hex1V hex2V hex0V)
	      ;(setq B (decrement-byte-BE (copy-vector B)))
	      (setq hex1V (binary-to-hexadecimal-BE H))
	      (setq hex2V (binary-to-hexadecimal-BE L))
	      (setq hex0V (concatenate-vectors hex1V hex2V))         ; DCH (Decimal Coded Hexadecimal) vector
	      (setq address (present-hexadecimal-BE hex0V))
	      (setq bytebinV (RAM-access address))
	      (setq bytebinV (increment-byte-BE))
	      (RAM-store address bytebinV)
	    )
	  )
	  ((= hexdit2 5)          ; 35 : DCR M
	    (y-or-n-p "DCR M")
	    (let (address bytebinV hex1V hex2V hex0V)
	      ;(setq B (decrement-byte-BE (copy-vector B)))
	      (setq hex1V (binary-to-hexadecimal-BE H))
	      (setq hex2V (binary-to-hexadecimal-BE L))
	      (setq hex0V (concatenate-vectors hex1V hex2V))         ; DCH (Decimal Coded Hexadecimal) vector
	      (setq address (present-hexadecimal-BE hex0V))
	      (setq bytebinV (RAM-access address))
	      (setq bytebinV (decrement-byte-BE))
	      (RAM-store address bytebinV)
	    )
	  )
	  ((= hexdit2 6)          ; 36 : MVI M, n      [MVI (HL), n]
	    (y-or-n-p "MVI M, n")
	    (let (hexdit3 hexdit4 storee hex1V hex2V address)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq storee (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq hex1V (binary-to-hexadecimal-BE H))
	      (setq hex2V (binary-to-hexadecimal-BE L))
	      (setq hexV (concatenate-vectors hex1V hex2V))         ; DCH (Decimal Coded Hexadecimal) vector
	      (setq address (present-hexadecimal-BE hexV))
	      (RAM-store address storee)
	    )
	  )
	  ((= hexdit2 7)          ; 37 : STC
	    (y-or-n-p "STC")
            (set-carry-flag)
	  )
	  ((= hexdit2 9)          ; 39 : DAD SP        [ADD HL, SP]
            (y-or-n-p "DAD SP")
	    (let (HL sum)
	      (setq HL (concatenate-vectors H L))
	      (setq sum (add-double-bytes-BE HL (copy-vector SP)))
	      (setq H (project-first-byte-from-double-byte sum))
	      (setq L (project-second-byte-from-double-byte sum))
	    )
	  )
	  ((= hexdit2 10)         ; 3A nN : LDA nN     [LD A, (nn)]
	    (y-or-n-p "LDA nN")
	    (let (hexdit3 hexdit4 hexdit5 hexdit6 address extraction)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq hexdit5 (aref hexV 4))
	      (setq hexdit6 (aref hexV 5))
	      (setq address (present-hexadecimal-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))       ; swapped order
	      (setq extraction (RAM-access address))
	      (setq A extraction)
	    )
	  )
	  ((= hexdit2 11)       ; 3B : DCX SP
            (y-or-n-p "DCX SP")
	      (setq SP (decrement-double-byte-BE SP))
	  )
	  ((= hexdit2 13)       ; 3D : INR A
            (y-or-n-p "INR A")
            (setq A (increment-byte-BE (copy-vector A)))
	  )
	  ((= hexdit2 14)       ; 3E : MVI A, n
	    (y-or-n-p "MVI A, n")
	    (let (hexdit3 hexdit4)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq A (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	    )
	  )
	  ((= hexdit2 15)      ; 3F : CMC
	    (y-or-n-p "CMC")
	    (toggle-carry-flag)
	  )
	)
      )
      ((= hexdit1 4)           ; 4_
        (cond
	  ((= hexdit2 1) "MOV B, C" (setq B (copy-vector C)))      ; 41 : MOV B, C
	  ((= hexdit2 2) "MOV B, D" (setq B (copy-vector D)))      ; 42 : MOV B, D
	  ((= hexdit2 3) "MOV B, E" (setq B (copy-vector E)))      ; 43 : MOV B, E
	  ((= hexdit2 4) "MOV B, H" (setq B (copy-vector H)))      ; 44 : MOV B, H
	  ((= hexdit2 5) "MOV B, L" (setq B (copy-vector L)))      ; 45 : MOV B, L
	  ((= hexdit2 6)                                           ; 46 : MOV B, M
            (y-or-n-p "MOV B, M")        
	    (let (address extraction hex0V)
	      (setq hex0V (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L)))
	      (y-or-n-p (concat "hexV = " (numerical-vector-to-string hex0V)))
              (setq address (present-hexadecimal-BE hex0V))
	      (y-or-n-p (concat "address = " address))
	      (setq extraction (RAM-access address))
	      (y-or-n-p (concat "extraction = " (numerical-vector-to-string extraction)))
	      (setq B extraction)
	    )
	  )
	  ((= hexdit2 7) (y-or-n-p "MOV B, A") (setq B (copy-vector A)))      ; 47 : MOV B, A
	  ((= hexdit2 8) (y-or-n-p "MOV C, B") (setq C (copy-vector B)))      ; 48 : MOV C, B
	  ((= hexdit2 10) (y-or-n-p "MOV C, D") (setq C (copy-vector D)))      ; 4A : MOV C, D
	  ((= hexdit2 11) (y-or-n-p "MOV C, E") (setq C (copy-vector E)))      ; 4B : MOV C, E
	  ((= hexdit2 12) (y-or-n-p "MOV C, H") (setq C (copy-vector H)))      ; 4C : MOV C, H
	  ((= hexdit2 13) (y-or-n-p "MOV C, L") (setq C (copy-vector L)))      ; 4D : MOV C, L
	  ((= hexdit2 14)                                           ; 4E : MOV C, M
            (let (address extraction hex0V)
	      (setq hex0V (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L)))
	      ;(y-or-n-p (concat "hex0V = " (numerical-vector-to-string hex0V)))
              (setq address (present-hexadecimal-BE hex0V))
	      ;(y-or-n-p (concat "address = " address))
	      (setq extraction (RAM-access address))
	      ;(y-or-n-p (concat "extraction = " (numerical-vector-to-string extraction)))
	      (setq C extraction)
	    )
	  )
	  ((= hexdit2 15) (y-or-n-p "MOV C, A") (setq C (copy-vector A)))      ; 4F : MOV C, A
        )
      )
      ((= hexdit1 5)          ; 5_
        (cond
	  ((= hexdit2 6)                                           ; 56 : MOV D, M
	    (y-or-n-p "MOV D, M")
            (let (address extraction hex0V)
	      (setq hex0V (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L)))
              (setq address (present-hexadecimal-BE hex0V))
	      (setq extraction (RAM-access address))
	      (setq D extraction)
	    )
	  )
	  ((= hexdit2 7) (y-or-n-p "MOV D, A") (setq D (copy-vector A)))      ; 57 : MOV D, A
          ((= hexdit2 10) (y-or-n-p "MOV E, D") (setq E (copy-vector D)))     ; 5A : MOV E, D
	  ((= hexdit2 14)                                          ; 5E : MOV E, M
	    (y-or-n-p "MOV E, M")
            (let (address extraction hex0V)
	      (setq hex0V (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L)))
	      ;(y-or-n-p (concat "hex0V = " (numerical-vector-to-string hex0V)))
              (setq address (present-hexadecimal-BE hex0V))
	      ;(y-or-n-p (concat "address = " address))
	      (setq extraction (RAM-access address))
	      ;(y-or-n-p (concat "extraction = " (numerical-vector-to-string extraction)))
	      (setq E extraction)
	    )
	  )
	  ((= hexdit2 15) (y-or-n-p "MOV E, A") (setq E (copy-vector A)))     ; 5F : MOV E, A
	)
      )
      ((= hexdit1 6)             ; 6_
        (cond
	  ((= hexdit2 0) (y-or-n-p "MOV H, B") (setq H (copy-vector B)))      ; 60 : MOV H, B
	  ((= hexdit2 1) (y-or-n-p "MOV H, C") (setq H (copy-vector C)))      ; 61 : MOV H, C
	  ((= hexdit2 2) (y-or-n-p "MOV H, D") (setq H (copy-vector D)))      ; 62 : MOV H, D
	  ((= hexdit2 3) (y-or-n-p "MOV H, E") (setq H (copy-vector E)))      ; 63 : MOV H, E
	  ((= hexdit2 5) (y-or-n-p "MOV H, L") (setq H (copy-vector L)))      ; 65 : MOV H, L
	  ((= hexdit2 6)                                           ; 66 : MOV H, M
	    (y-or-n-p "MOV H, M")
            (let (address extraction hex0V)
	      (setq hex0V (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L)))
	      ;(y-or-n-p (concat "hex0V = " (numerical-vector-to-string hex0V)))
              (setq address (present-hexadecimal-BE hex0V))
	      ;(y-or-n-p (concat "address = " address))
	      (setq extraction (RAM-access address))
	      ;(y-or-n-p (concat "extraction = " (numerical-vector-to-string extraction)))
	      (setq H extraction)
	    )
	  )
	  ((= hexdit2 7) (y-or-n-p "MOV H, A") (setq H (copy-vector A)))      ; 67 : MOV H, A
	  ((= hexdit2 8) (y-or-n-p "MOV L, B") (setq L (copy-vector B)))      ; 68 : MOV L, B
	  ((= hexdit2 9) (y-or-n-p "MOV L, C") (setq L (copy-vector C)))      ; 69 : MOV L, C
	  ((= hexdit2 10) (y-or-n-p "MOV L, D") (setq L (copy-vector D)))      ; 6A : MOV L, D
	  ((= hexdit2 11) (y-or-n-p "MOV L, E") (setq L (copy-vector E)))      ; 6B : MOV L, E
	  ((= hexdit2 12) (y-or-n-p "MOV L, H") (setq L (copy-vector H)))      ; 6C : MOV L, H
	  ((= hexdit2 14)                ; 6E : MOV L, M
	    (y-or-n-p "MOV L, M")
	    (let (address extraction)
	      (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L))))
	      ;(y-or-n-p (concat "address = " address))
	      (setq extraction (RAM-access address))
	      ;(y-or-n-p (concat "extraction = " (numerical-vector-to-string extraction)))
	      (setq L extraction)
	    )
	  )
	  ((= hexdit2 15) (y-or-n-p "MOV L, A") (setq L (copy-vector A)))     ; 6F : MOV L, A
	)
      )
      ((= hexdit1 7)         ; 7_
        (cond
	  ((= hexdit2 0)                                          ; 70 : MOV M, B
	    (y-or-n-p "MOV M, B")
            (let (address)
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L))))
	      (RAM-store address (copy-vector B))
	    )
	  )
	  ((= hexdit2 1)                                          ; 71 : MOV M, C
	    (y-or-n-p "MOV M, C")
            (let (address)
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L))))
	      (RAM-store address (copy-vector C))
	    )
	  )
	  ((= hexdit2 2)                                          ; 72 : MOV M, D
	    (y-or-n-p "MOV M, D")
            (let (address)
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L))))
	      (RAM-store address (copy-vector D))
	    )
	  )
	  ((= hexdit2 3)                                          ; 73 : MOV M, E
	    (y-or-n-p "MOV M, E")
            (let (address)
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L))))
	      (RAM-store address (copy-vector E))
	    )
	  )
	  ((= hexdit2 4)                                          ; 74 : MOV M, H
	    (y-or-n-p "MOV M, H")
            (let (address)
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L))))
	      (RAM-store address (copy-vector H))
	    )
	  )
	  ((= hexdit2 5)                                          ; 75 : MOV M, L
	    (y-or-n-p "MOV M, L")
            (let (address)
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L))))
	      (RAM-store address (copy-vector L))
	    )
	  )
	  ((= hexdit2 7)                                          ; 77 : MOV M, A
	    (y-or-n-p "MOV M, A")
	    (let (address)
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L))))
	      (RAM-store address (copy-vector A))
	    )
	  )
	  ((= hexdit2 8) (y-or-n-p "MOV A, B") (setq A (copy-vector B)))     ; 78 : MOV A, B
	  ((= hexdit2 9) (y-or-n-p "MOV A, C") (setq A (copy-vector C)))     ; 79 : MOV A, C
	  ((= hexdit2 10) (y-or-n-p "MOV A, D") (setq A (copy-vector D)))     ; 7A : MOV A, D
	  ((= hexdit2 11) (y-or-n-p "MOV A, E") (setq A (copy-vector E)))     ; 7B : MOV A, E
	  ((= hexdit2 12) (y-or-n-p "MOV A, H") (setq A (copy-vector H)))     ; 7C : MOV A, H
	  ((= hexdit2 13) (y-or-n-p "MOV A, L") (setq A (copy-vector L)))     ; 7D : MOV A, L
	  ((= hexdit2 14)      ; 7E : MOV A, M
	    (y-or-n-p "MOV A, M")
	    (let (address extraction)
              (setq address (present-hexadecimal-BE (concatenate-vectors (binary-to-hexadecimal-BE H) (binary-to-hexadecimal-BE L))))
	      (setq extraction (RAM-access address))
	      (setq A extraction)
	    )
	  )
	)
      )
      ((= hexdit1 8)         ; 8_
        (cond
	  ((= hexdit2 0)        ; 80 : ADD B
	    (y-or-n-p "ADD B")
            (let (addend accumulator)
              (setq addend (copy-vector B))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 1)        ; 81 : ADD C
            (y-or-n-p "ADD C")
            (let (addend accumulator)
              (setq addend (copy-vector C))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 2)        ; 82 : ADD D
	    (y-or-n-p "ADD D")
            (let (addend accumulator)
              (setq addend (copy-vector D))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 3)        ; 83 : ADD E
	    (y-or-n-p "ADD E")
            (let (addend accumulator)
              (setq addend (copy-vector E))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 4)        ; 84 : ADD H
	    (y-or-n-p "ADD H")
            (let (addend accumulator)
              (setq addend (copy-vector H))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 5)        ; 85 : ADD L
	    (y-or-n-p "ADD L")
	    (let (addend accumulator)
              (setq addend (copy-vector L))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 6)        ; 86 : ADD M     [ADD (HL)]
	    (y-or-n-p "ADD M")
	    (let (address addend accumulator)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE (concatenate-vectors H L))))
	      (y-or-n-p (concat "address = " address))
	      (setq addend (RAM-access address))
	      (y-or-n-p (concat "addend = " (numerical-vector-to-string addend)))
	      (setq accumulator (copy-vector A))
	      (y-or-n-p (concat "accumulator = " (numerical-vector-to-string accumulator)))
	      (setq A (add-bytes-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 7)         ; 87 : ADD A
	    (y-or-n-p "ADD A")
            (let (addend accumulator)
              (setq addend (copy-vector A))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 8)         ; 88 : ADC B
	    (y-or-n-p "ADC B")
	    (let (addend accumulator)
	      "A <- A + B + c"
              (setq addend (copy-vector B))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-with-carry-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 9)         ; 89 : ADC C
	    (y-or-n-p "ADC C")
            (let (addend accumulator)
	      "A <- A + C + c"
              (setq addend (copy-vector C))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-with-carry-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 10)        ; 8A : ADC D
	    (y-or-n-p "ADC D")
            (let (addend accumulator)
	      "A <- A + D + c"
              (setq addend (copy-vector D))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-with-carry-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 11)        ; 8B : ADC E
	    (y-or-n-p "ADC E")
            (let (addend accumulator)
	      "A <- A + E + c"
              (setq addend (copy-vector E))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-with-carry-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 12)        ; 8C : ADC H
	    (y-or-n-p "ADC H")
	    "A <- A + H + c"
	    (let (addend accumulator)
              (setq addend (copy-vector H))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-with-carry-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 13)        ; 8D : ADC L
	    (y-or-n-p "ADC L")
            (let (addend accumulator)
	      "A <- A + L"
              (setq addend (copy-vector L))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-with-carry-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 14)        ; 8E : ADC (HL)
	    (y-or-n-p "ADC M")
            (let (address addend accumulator)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE (concatenate-vectors H L))))
	      (y-or-n-p (concat "address = " address))
	      (setq addend (RAM-access address))
	      (y-or-n-p (concat "addend = " (numerical-vector-to-string addend)))
	      (setq accumulator (copy-vector A))
	      (y-or-n-p (concat "accumulator = " (numerical-vector-to-string accumulator)))
	      (setq A (add-bytes-with-carry-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 15)        ; 8F : ADC A
	    (y-or-n-p "ADC A")
            (let (addend accumulator)
              (setq addend (copy-vector A))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-with-carry-BE accumulator addend))
	    )
	  )
	)
      )
      ((= hexdit1 9)         ; 9_
        (cond
	  ((= hexdit2 0)                                         ; 90 : SUB B
	    (y-or-n-p "SUB B")
	    "A <- A - B"
	    (let (subtrahend accumulator)
              (setq subtrahend (copy-vector B))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 1)                                         ; 91 : SUB C
	    (y-or-n-p "SUB C")
	    "A <- A - C"
	    (let (subtrahend accumulator)
              (setq subtrahend (copy-vector C))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 2)                                         ; 92 : SUB D
	    (y-or-n-p "SUB D")
	    "A <- A - D"
	    (let (subtrahend accumulator)
              (setq subtrahend (copy-vector D))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 3)                                         ; 93 : SUB E
	    (y-or-n-p "SUB E")
	    (let (subtrahend accumulator)
              (setq subtrahend (copy-vector E))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 4)                                         ; 94 : SUB H
	    (y-or-n-p "SUB H")
            (let (subtrahend accumulator)
              (setq subtrahend (copy-vector H))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 5)                                         ; 95 : SUB L
	    (y-or-n-p "SUB L")
            (let (subtrahend accumulator)
              (setq subtrahend (copy-vector L))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 6)                                         ; 96 : SUB M
	   (y-or-n-p "SUB M")
	   (let (address subtrahend accumulator)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE (concatenate-vectors H L))))
	      (setq subtrahend (RAM-access address))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 7) (y-or-n-p "SUB A") (setq A [0 0 0 0 0 0 0 0]))     ; 97 : SUB A
	  ((= hexdit2 8)                                         ; 98 : SBB B
            (y-or-n-p "SBB B")
	    "A <- A - B - c"
	    (let (subtrahend accumulator)
              (setq subtrahend (copy-vector B))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-with-carry-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 9)                                         ; 99 : SBB C
	    (y-or-n-p "SBB C")
	    "A <- A - C - c"
	    (let (subtrahend accumulator)
              (setq subtrahend (copy-vector C))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-with-carry-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 10)                                        ; 9A : SBB D
            (y-or-n-p "SBB D")
	    "A <- A - D - c"
	    (let (subtrahend accumulator)
              (setq subtrahend (copy-vector D))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-with-carry-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 11)                                        ; 9B : SBB E
            (y-or-n-p "SBB E")
	    "A <- A - E - c"
	    (let (subtrahend accumulator)
              (setq subtrahend (copy-vector E))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-with-carry-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 12)                                        ; 9C : SBB H
            (y-or-n-p "SBB H")
	    "A <- A - H - c"
	    (let (subtrahend accumulator)
              (setq subtrahend (copy-vector H))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-with-carry-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 13)                                        ; 9D : SBB L
            (y-or-n-p "SBB L")
	    "A <- A - L - c"
	    (let (subtrahend accumulator)
              (setq subtrahend (copy-vector L))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-with-carry-BE accumulator subtrahend))
	    )
	  )
        )
      )
      ((= hexdit1 10)        ; A_
        (cond
	  ((= hexdit2 0) (y-or-n-p "ANA B") (setq A (AND-bytes (copy-vector A) (copy-vector B))))          ; A0 : ANA B
	  ((= hexdit2 1) (y-or-n-p "ANA C") (setq A (AND-bytes (copy-vector A) (copy-vector C))))          ; A1 : ANA C
	  ((= hexdit2 2) (y-or-n-p "ANA D") (setq A (AND-bytes (copy-vector A) (copy-vector D))))          ; A2 : ANA D
	  ((= hexdit2 3) (y-or-n-p "ANA E") (setq A (AND-bytes (copy-vector A) (copy-vector E))))          ; A3 : ANA E
	  ((= hexdit2 4) (y-or-n-p "ANA H") (setq A (AND-bytes (copy-vector A) (copy-vector H))))          ; A4 : ANA H
	  ((= hexdit2 5) (y-or-n-p "ANA L") (setq A (AND-bytes (copy-vector A) (copy-vector L))))          ; A5 : ANA L
	  ((= hexdit2 6)                                                                                   ; A6 : ANA M
	    (y-or-n-p "ANA M")
	    (let (address operand accumulator)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE (concatenate-vectors H L))))
	      (setq operand (RAM-access address))
	      (setq accumulator (copy-vector A))
	      (setq A (AND-bytes accumulator operand))
	    )
	  )
          ((= hexdit2 7) (y-or-n-p "ANA A") (setq A (AND-bytes (copy-vector A) (copy-vector A))))          ; A7 : ANA A
	  ((= hexdit2 8) (y-or-n-p "XRA B") (setq A (XOR-bytes (copy-vector A) (copy-vector B))))          ; A8 : XRA B
	  ((= hexdit2 9) (y-or-n-p "XRA C") (setq A (XOR-bytes (copy-vector A) (copy-vector C))))          ; A9 : XRA C
	  ((= hexdit2 10) (y-or-n-p "XRA D") (setq A (XOR-bytes (copy-vector A) (copy-vector D))))          ; AA : XRA D
	  ((= hexdit2 11) (y-or-n-p "XRA E") (setq A (XOR-bytes (copy-vector A) (copy-vector E))))          ; AB : XRA E
	  ((= hexdit2 12) (y-or-n-p "XRA H") (setq A (XOR-bytes (copy-vector A) (copy-vector H))))          ; AC : XRA H
	  ((= hexdit2 13) (y-or-n-p "XRA L") (setq A (XOR-bytes (copy-vector A) (copy-vector L))))          ; AD : XRA L
	  ((= hexdit2 14)                                                                                   ; AE : XRA M
	    (y-or-n-p "XRA M")
	    (let (address operand accumulator)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE (concatenate-vectors H L))))
	      (setq operand (RAM-access address))
	      (setq accumulator (copy-vector A))
	      (setq A (XOR-bytes accumulator operand))
	    )
	  )
	)
      )
      ((= hexdit1 11)        ; B_
        (cond
	  ((= hexdit2 0) (y-or-n-p "ORA B") (setq A (OR-bytes (copy-vector A) (copy-vector B))))           ; B0 : ORA B
          ((= hexdit2 1) (y-or-n-p "ORA C") (setq A (OR-bytes (copy-vector A) (copy-vector C))))           ; B1 : ORA C   
	  ((= hexdit2 2) (y-or-n-p "ORA D") (setq A (OR-bytes (copy-vector A) (copy-vector D))))           ; B2 : ORA D
	  ((= hexdit2 3) (y-or-n-p "ORA E") (setq A (OR-bytes (copy-vector A) (copy-vector E))))           ; B3 : ORA E
	  ((= hexdit2 4) (y-or-n-p "ORA H") (setq A (OR-bytes (copy-vector A) (copy-vector H))))           ; B4 : ORA H
	  ((= hexdit2 5) (y-or-n-p "ORA L") (setq A (OR-bytes (copy-vector A) (copy-vector L))))           ; B5 : ORA L
	  ((= hexdit2 6)                                                                                   ; B6 : ORA M
            (y-or-n-p "ORA M")
	    (let (address operand accumulator)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE (concatenate-vectors H L))))
	      (setq operand (RAM-access address))
	      (setq accumulator (copy-vector A))
	      (setq A (AND-bytes accumulator operand))
	    )
	  )
	  ((= hexdit2 7) (y-or-n-p "ORA A") (setq A (OR-bytes (copy-vector A) (copy-vector A))))           ; B7 : ORA A
	  ((= hexdit2 8)                                                                                   ; B8 : CMP B
            (y-or-n-p "CMP B")
	    (let (accumulator operand)
	      (setq operand (copy-vector B))
	      (setq accumulator (copy-vector A))
	      (subtract-bytes-BE accumulator operand)
	      "The result is not stored; only the flags matter for a comparison."
	    )
	  )
	  ((= hexdit2 9)                                                                                   ; B9 : CMP C
            (y-or-n-p "CMP C")
	    (let (accumulator operand)
	      (setq operand (copy-vector C))
	      (setq accumulator (copy-vector A))
	      (subtract-bytes-BE accumulator operand)
	      "The result is not stored; only the flags matter for a comparison."
	    )
	  )
	  ((= hexdit2 10)                                                                                   ; BA : CMP D
            (y-or-n-p "CMP D")
	    (let (accumulator operand)
	      (setq operand (copy-vector D))
	      (setq accumulator (copy-vector A))
	      (subtract-bytes-BE accumulator operand)
	      "The result is not stored; only the flags matter for a comparison."
	    )
	  )
	  ((= hexdit2 11)                                                                                   ; BB : CMP E
            (y-or-n-p "CMP E")
	    (let (accumulator operand)
	      (setq operand (copy-vector E))
	      (setq accumulator (copy-vector A))
	      (subtract-bytes-BE accumulator operand)
	      "The result is not stored; only the flags matter for a comparison."
	    )
	  )
	  ((= hexdit2 12)                                                                                   ; BC : CMP H
            (y-or-n-p "CMP H")
	    (let (accumulator operand)
	      (setq operand (copy-vector H))
	      (setq accumulator (copy-vector A))
	      (subtract-bytes-BE accumulator operand)
	      "The result is not stored; only the flags matter for a comparison."
	    )
	  )
	  ((= hexdit2 13)                                                                                   ; BD : CMP L
            (y-or-n-p "CMP L")
	    (let (accumulator operand)
	      (setq operand (copy-vector L))
	      (setq accumulator (copy-vector A))
	      (subtract-bytes-BE accumulator operand)
	      "The result is not stored; only the flags matter for a comparison."
	    )
	  )
	  ((= hexdit2 14)                                                                                   ; BE : CMP M
	    (y-or-n-p "CMP M")
	    (let (address operand accumulator)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE (concatenate-vectors H L))))
	      (setq operand (RAM-access address))
	      (setq accumulator (copy-vector A))
	      (subtract-bytes-BE accumulator operand)
	    )
	  )
	)
      )
      ((= hexdit1 12)        ; C_
        (cond
	 ((= hexdit2 1)        ; C1 : POP B
	    (y-or-n-p "POP B")
            (let (address)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (setq C (RAM-access address))
	      ;(setq SP (add-double-bytes-BE SP [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]))
	      (setq SP (increment-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (setq B (RAM-access address))
	      ;(setq SP (add-double-bytes-BE SP [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]))
	      (setq SP (increment-double-byte-BE SP))
	    )
	  )
	  ((= hexdit2 2)        ; C2 : JNZ nN
	    (y-or-n-p "JNZ nN")
	    (if (= (what-is-zero-flag) 0)
	      (let (hexdit3 hexdit4 hexdit5 hexdit6) 
                (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq PC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))    ; swapped format
	      )
	    )
	  )
          ((= hexdit2 3)        ; C3 nN : JMP nN
	    (y-or-n-p "JMP nN")
	    (let (hexdit3 hexdit4 hexdit5 hexdit6)
	      (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq hexdit5 (aref hexV 4))
	      (setq hexdit6 (aref hexV 5))
	      ;(setq address (present-hexadecimal-BE (vector hexdit3 hexdit4 hexdit5 hexdit6)))
	      (setq PC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))    ; swapped format
	    )
	  )
	  ((= hexdit2 4)        ; C4 : CNZ nN
	    (y-or-n-p "CNZ nN")
            (if (= (what-is-zero-flag) 0)
              (let (PChigh PClow address hexdit3 hexdit4 hexdit5 hexdit6 newPC)
	        (setq PChigh (project-first-byte-from-double-byte PC))
	        (setq PClow (project-second-byte-from-double-byte PC))
                (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PChigh)
	        (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PClow)
	        (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq newPC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit4 hexdit4)))        ; swapped format
	        (setq PC newPC)
	      )
	    )
	  )
	  ((= hexdit2 5)        ; C5 : PUSH B
	    (y-or-n-p "PUSH B")
            (let (address)
	      ;(setq SP (add-double-bytes-BE SP [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]))
	      (setq SP (decrement-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (RAM-store address B)
	      ;(setq SP (add-double-bytes-BE SP [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]))
	      (setq SP (decrement-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (RAM-store address C)
	    )
	  )
	  ((= hexdit2 6)        ; C6 : ADI n
	    (y-or-n-p "ADI n")
            (let (addend accumulator hexdit3 hexdit4)
	      (setq addend (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-BE accumulator addend))
	    )
	  )
	  ((= hexdit2 9)        ; C9 : RET
	    (y-or-n-p "RET")
	    (let (PChigh PClow newPC address)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (setq PClow (RAM-access address))
	      (setq SP (increment-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (setq PChigh (RAM-access address))
	      (setq SP (increment-double-byte-BE SP))
	      (setq newPC (concatenate-vectors PChigh PClow))
	      (setq PC (copy-vector newPC))
	    )
	  )
	  ((= hexdit2 10)       ; CA nN : JZ nN
	    (y-or-n-p "JZ nN")
	    (if (= (what-is-zero-flag) 1)
	      (let (hexdit3 hexdit4 hexdit5 hexdit6)
		(y-or-n-p "Jumping.")  
                (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq PC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))    ; swapped format
	      )
	      (y-or-n-p "Not jumping.")
	    )
	  )
	  ((= hexdit2 12)        ; CC : CZ nN
	    (y-or-n-p "CZ nN")
            (if (= (what-is-zero-flag) 1)
              (let (PChigh PClow address hexdit3 hexdit4 hexdit5 hexdit6 newPC)
	        (setq PChigh (project-first-byte-from-double-byte PC))
	        (setq PClow (project-second-byte-from-double-byte PC))
                (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PChigh)
	        (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PClow)
	        (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq newPC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit4 hexdit4)))        ; swapped format
	        (setq PC newPC)
	      )
	    )
	  )
	  ((= hexdit2 13)        ; CD nN : CALL nN
	    (y-or-n-p "CALL nN")
	    (let (PChigh PClow address hexdit3 hexdit4 hexdit5 hexdit6 newPC)
	      (setq PChigh (project-first-byte-from-double-byte PC))
	      (y-or-n-p (concat "PChigh = " (numerical-vector-to-string PChigh)))
	      (setq PClow (project-second-byte-from-double-byte PC))
	      (y-or-n-p (concat "PClow = " (numerical-vector-to-string PClow)))
              (setq SP (decrement-double-byte-BE SP))
	      (y-or-n-p (concat "SP = " (numerical-vector-to-string SP)))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (y-or-n-p (concat "address = " address))
	      (RAM-store address PChigh)
	      (y-or-n-p (concat "(" address ") = " (numerical-vector-to-string (RAM-access address))))
	      (setq SP (decrement-double-byte-BE SP))
	      (y-or-n-p (concat "SP = " (numerical-vector-to-string SP)))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (y-or-n-p (concat "address = " address))
	      (RAM-store address PClow)
	      (y-or-n-p (concat "(" address ") = " (numerical-vector-to-string (RAM-access address))))
	      (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq hexdit5 (aref hexV 4))
	      (setq hexdit6 (aref hexV 5))
	      (setq newPC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit4 hexdit4)))
	      (y-or-n-p (concat "newPC = " (numerical-vector-to-string newPC)))
	      (setq PC newPC)
	    )
	  )
	  ((= hexdit2 14)         ; CE : ADC n
	    (y-or-n-p "ADC n")
            (let (addend accumulator hexdit3 hexdit4)
	      (setq addend (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-with-carry-BE accumulator addend))
	    )
	  )
	)
      )
      ((= hexdit1 13)        ;  D_
        (cond
	  ((= hexdit2 1)         ; D1 : POP D
            (y-or-n-p "POP D")
            (let (address)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (setq E (RAM-access address))
	      ;(setq SP (add-double-bytes-BE SP [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]))
	      (setq SP (increment-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (setq D (RAM-access address))
	      ;(setq SP (add-double-bytes-BE SP [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]))
	      (setq SP (increment-double-byte-BE SP))
	    )
	  )
	  ((= hexdit2 2)         ; D2 : JNC nN
	    (y-or-n-p "JNC nN")
            (if (= (what-is-carry-flag) 0)
              (let (hexdit3 hexdit4 hexdit5 hexdit6) 
                (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq PC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))    ; swapped format
	      )
	    )
	  )
	  ((= hexdit2 4)         ; D4 : CNC nN
	    (y-or-n-p "CNC nN")
	    (if (= (what-is-carry-flag) 0)
              (let (PChigh PClow address hexdit3 hexdit4 hexdit5 hexdit6 newPC)
	        (setq PChigh (project-first-byte-from-double-byte PC))
	        ;(y-or-n-p (concat "PChigh = " (numerical-vector-to-string PChigh)))
	        (setq PClow (project-second-byte-from-double-byte PC))
	        ;(y-or-n-p (concat "PClow = " (numerical-vector-to-string PClow)))
                (setq SP (decrement-double-byte-BE SP))
	        ;(y-or-n-p (concat "SP = " (numerical-vector-to-string SP)))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        ;(y-or-n-p (concat "address = " address))
	        (RAM-store address PChigh)
	        ;(y-or-n-p (concat "(" address ") = " (numerical-vector-to-string (RAM-access address))))
	        (setq SP (decrement-double-byte-BE SP))
	        ;(y-or-n-p (concat "SP = " (numerical-vector-to-string SP)))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        ;(y-or-n-p (concat "address = " address))
	        (RAM-store address PClow)
	        ;(y-or-n-p (concat "(" address ") = " (numerical-vector-to-string (RAM-access address))))
	        (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq newPC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit4 hexdit4)))        ; swapped format
	        ;(y-or-n-p (concat "newPC = " (numerical-vector-to-string newPC)))
	        (setq PC newPC)
	      )
	    )
	  )
	  ((= hexdit2 5)         ; D5 : PUSH D
            (y-or-n-p "PUSH D")
            (let (address)
	      (setq SP (decrement-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (RAM-store address D)
	      (setq SP (decrement-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (RAM-store address E)
	    )
	  )
	  ((= hexdit2 6)         ; D6 : SUI n
	    (y-or-n-p "SUI n")
	    "A <- A - n"
	    (let (subtrahend accumulator hexdit3 hexdit4)
	      (setq subtrahend (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq accumulator (copy-vector A))
	      (setq A (add-bytes-BE accumulator subtrahend))
	    )
	  )
	  ((= hexdit2 10)        ; DA : JC nN
	    (y-or-n-p "JC nN")
            (if (= (what-is-carry-flag) 1)
              (let (hexdit3 hexdit4 hexdit5 hexdit6) 
                (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq PC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))    ; swapped format
	      )
	    )
	  )
	  ((= hexdit2 12)         ; DC : CC nN
	    (y-or-n-p "CC nN")
	    "Call subroutine at nN on C = 1."
	    (if (= (what-is-carry-flag) 1)
              (let (PChigh PClow address hexdit3 hexdit4 hexdit5 hexdit6 newPC)
	        (setq PChigh (project-first-byte-from-double-byte PC))
	        ;(y-or-n-p (concat "PChigh = " (numerical-vector-to-string PChigh)))
	        (setq PClow (project-second-byte-from-double-byte PC))
	        ;(y-or-n-p (concat "PClow = " (numerical-vector-to-string PClow)))
                (setq SP (decrement-double-byte-BE SP))
	        ;(y-or-n-p (concat "SP = " (numerical-vector-to-string SP)))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        ;(y-or-n-p (concat "address = " address))
	        (RAM-store address PChigh)
	        ;(y-or-n-p (concat "(" address ") = " (numerical-vector-to-string (RAM-access address))))
	        (setq SP (decrement-double-byte-BE SP))
	        ;(y-or-n-p (concat "SP = " (numerical-vector-to-string SP)))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        ;(y-or-n-p (concat "address = " address))
	        (RAM-store address PClow)
	        ;(y-or-n-p (concat "(" address ") = " (numerical-vector-to-string (RAM-access address))))
	        (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq newPC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit4 hexdit4)))        ; swapped format
	        ;(y-or-n-p (concat "newPC = " (numerical-vector-to-string newPC)))
	        (setq PC newPC)
	      )
	    )
	  )
	  ((= hexdit2 14)          ; DE : SBI n
            (y-or-n-p "SBI n")
	    "A <- A - n - c"
	    (let (subtrahend accumulator hexdit3 hexdit4 immediate)
	      (setq subtrahend (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq accumulator (copy-vector A))
	      (setq A (subtract-bytes-with-carry-BE accumulator subtrahend))
	    )
	  )
	)
      )
      ((= hexdit1 14)        ;  E_
        (cond
	  ((= hexdit2 1)     ;  E1 : POP H
	    (y-or-n-p "POP H")
            (let (address)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (setq L (RAM-access address))
	      ;(setq SP (add-double-bytes-BE SP [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]))
	      (setq SP (increment-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (setq H (RAM-access address))
	      ;(setq SP (add-double-bytes-BE SP [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]))
	      (setq SP (increment-double-byte-BE SP))
	    )
	  )
	  ((= hexdit2 2)     ;  E2 : JNO nN
	    (y-or-n-p "JNO nN")
	    (if (= (what-is-overflow-flag) 0)
              (let (hexdit3 hexdit4 hexdit5 hexdit6 binV) 
                (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
		(setq binV (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))
	        (setq PC binV)    ; swapped format
	      )
	      (y-or-n-p "O = 1 therefore not jumping.")
	    )
	  )
	  ((= hexdit2 4)     ; E4 : CPO nN    /    CNO nN
	    (y-or-n-p "CPO nN")
            (if (= (what-is-parity-flag) 0)
              (let (PChigh PClow address hexdit3 hexdit4 hexdit5 hexdit6 newPC)
	        (setq PChigh (project-first-byte-from-double-byte PC))
	        (setq PClow (project-second-byte-from-double-byte PC))
                (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PChigh)
	        (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PClow)
	        (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq newPC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit4 hexdit4)))        ; swapped format
	        (setq PC newPC)
	      )
	    )
	  )
	  ((= hexdit2 5)     ;  E5 : PUSH H        [PUSH HL]
	    (y-or-n-p "PUSH H")
            (let (address)
	      ;(setq SP (add-double-bytes-BE SP [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]))
	      (setq SP (decrement-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (RAM-store address H)
	      ;(setq SP (add-double-bytes-BE SP [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]))
	      (setq SP (decrement-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (RAM-store address L)
	    )
	  )
	  ((= hexdit2 6)      ; E6 n : ANI n
	    (y-or-n-p "ANI n")
	    (let (hexdit3 hexdit4 operand accumulator)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq operand (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq accumulator (copy-vector A))
	      (setq A (AND-bytes accumulator operand))
	    )
	  )
	  ((= hexdit2 9)      ; E9 : PCHL
	    (y-or-n-p "PCHL")
	    (let (HL)
              (setq HL (concatenate-vectors H L))
	      (setq PC HL)
	    )
	  )
	  ((= hexdit2 10)     ; EA : JO nN
            (y-or-n-p "JO nN")
            (if (= (what-is-overflow-flag) 1)
              (let (hexdit3 hexdit4 hexdit5 hexdit6) 
                (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq PC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))    ; swapped format
	      )
	    )
	  )
	  ((= hexdit2 11)      ; EB : XCHG        [EX DE, HL]
	    (y-or-n-p "XCHG")
	    (let (DE HL)
              (setq DE (concatenate-vectors D E))
	      (setq HL (concatenate-vectors H L))
	      (setq H (project-first-byte-from-double-byte DE))
	      (setq L (project-second-byte-from-double-byte DE))
	      (setq D (project-first-byte-from-double-byte HL))
	      (setq E (project-second-byte-from-double-byte HL))
	    )
	  )
	  ((= hexdit2 12)      ; EC nN : CPE nN   /   CO nN
	    (y-or-n-p "CPE nN")
            (if (= (what-is-parity-flag) 1)
              (let (PChigh PClow address hexdit3 hexdit4 hexdit5 hexdit6 newPC)
	        (setq PChigh (project-first-byte-from-double-byte PC))
	        (setq PClow (project-second-byte-from-double-byte PC))
                (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PChigh)
	        (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PClow)
	        (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq newPC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit4 hexdit4)))        ; swapped format
	        (setq PC newPC)
	      )
	    )
	  )
	  ((= hexdit2 14)             ; EE n : XRI n
            (y-or-n-p "XRI n")
	    (let (hexdit3 hexdit4 operand accumulator)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq operand (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq accumulator (copy-vector A))
	      (setq A (XOR-bytes accumulator operand))
	    )
	  )
	)
      )
      ((= hexdit1 15)
        (cond
	  ((= hexdit2 1)     ;  F1 : POP PSW
	    (y-or-n-p "POP PSW")
	    (let (address)
              (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (setq F (RAM-access address))
	      ;(setq SP (add-double-bytes-BE SP [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]))
	      (setq SP (increment-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (setq A (RAM-access address))
	      ;(setq SP (add-double-bytes-BE SP [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]))
	      (setq SP (increment-double-byte-BE SP))
	    )
	    )
	  ((= hexdit2 2)    ; F2 : JP nN
	    (y-or-n-p "JP nN")
            (if (= (what-is-sign-flag) 0)
              (let (hexdit3 hexdit4 hexdit5 hexdit6) 
                (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq PC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit3 hexdit4)))    ; swapped format
	      )
	    )
	  )
	  ((= hexdit2 4)    ; F4 : CP nN
	    (y-or-n-p "CP nN")
            (if (= (what-is-sign-flag) 0)
              (let (PChigh PClow address hexdit3 hexdit4 hexdit5 hexdit6 newPC)
	        (setq PChigh (project-first-byte-from-double-byte PC))
	        (setq PClow (project-second-byte-from-double-byte PC))
                (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PChigh)
	        (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PClow)
	        (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq newPC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit4 hexdit4)))        ; swapped format
	        (setq PC newPC)
	      )
	    )
	  )
	  ((= hexdit2 5)    ; F5 : PUSH PSW (PSW = AF)
	    (y-or-n-p "PUSH PSW")
	    (let (address)
	      ;(setq SP (add-double-bytes-BE SP [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]))
	      (setq SP (decrement-double-byte-BE SP))
	      (y-or-n-p (concat "SP = " (numerical-vector-to-string SP)))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (y-or-n-p (concat "address = " address))
	      (RAM-store address A)
	      (y-or-n-p (concat "A = " (numerical-vector-to-string A)))
	      (y-or-n-p (concat "(SP) = " (numerical-vector-to-string (RAM-access address))))
	      ;(setq SP (add-double-bytes-BE SP [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]))
	      (setq SP (decrement-double-byte-BE SP))
	      (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	      (y-or-n-p (concat "address = " address))
	      (RAM-store address F)
	      (y-or-n-p (concat "(SP) = " (numerical-vector-to-string (RAM-access address))))
	    )
	  )
	  ((= hexdit2 6)     ; F6 : ORI n
            (y-or-n-p "ORI n")
	    (let (hexdit3 hexdit4 operand accumulator)
              (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq operand (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq accumulator (copy-vector A))
	      (setq A (OR-bytes accumulator operand))
	    )
	  )
	  ((= hexdit2 9)     ; F9 : SPHL
	    (y-or-n-p "SPHL")
	    (let (HL)
              (setq HL (concatenate-vectors H L))
	      (setq SP HL)
	    )
	  )
	  ((= hexdit2 12)      ; FC : CM nN
	    (y-or-n-p "CM nN")
            (if (= (what-is-sign-flag) 1)
              (let (PChigh PClow address hexdit3 hexdit4 hexdit5 hexdit6 newPC)
	        (setq PChigh (project-first-byte-from-double-byte PC))
	        (setq PClow (project-second-byte-from-double-byte PC))
                (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PChigh)
	        (setq SP (decrement-double-byte-BE SP))
	        (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE SP)))
	        (RAM-store address PClow)
	        (setq hexdit3 (aref hexV 2))
	        (setq hexdit4 (aref hexV 3))
	        (setq hexdit5 (aref hexV 4))
	        (setq hexdit6 (aref hexV 5))
	        (setq newPC (hexadecimal-to-binary-BE (vector hexdit5 hexdit6 hexdit4 hexdit4)))        ; swapped format
	        (setq PC newPC)
	      )
	    )
	  )
	  ((= hexdit2 14)      ; FE n : CPI n
	    (y-or-n-p "CPI n")
	    (let (hexdit3 hexdit4 immediate accumulator)
	      (setq hexdit3 (aref hexV 2))
	      (setq hexdit4 (aref hexV 3))
	      (setq immediate (hexadecimal-to-binary-BE (vector hexdit3 hexdit4)))
	      (setq accumulator (copy-vector A))
	      (subtract-bytes-BE accumulator immediate)
	      "The result is not stored; only the flags matter for a comparison."
	    )
	  )
	)
      )
    )
  )
)
; end instruction

(defun exec ()
  "Execute a stored-program instruction."
  (let (address OPcodebinV OPcodehexV OPcodedecimal instructionsize operandbinV instructionbinV instructionhexV)
    (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE PC)))
    (y-or-n-p (concat "address = " address))
    (setq OPcodebinV (RAM-access address))
    (y-or-n-p (concat "OPcodebinV = " (numerical-vector-to-string OPcodebinV)))
    (setq OPcodehexV (binary-to-hexadecimal-BE OPcodebinV))
    (y-or-n-p (concat "OPcodehexV = " (numerical-vector-to-string OPcodehexV)))
    (setq OPcodedecimal (+ (* (aref OPcodehexV 0) 16) (aref OPcodehexV 1)))
    (y-or-n-p (concat "OPcodedecimal = " (number-to-string OPcodedecimal)))
    (setq instructionsize (aref instruction-size OPcodedecimal))
    (y-or-n-p (concat "instructionsize = " (number-to-string instructionsize)))
    (if (> instructionsize 1)
      (progn
        (setq PC (increment-double-byte-BE PC))       ; 1st time for size 2 or 3
	(y-or-n-p (concat "PC = " (numerical-vector-to-string PC)))
	(setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE PC)))
	(setq operandbinV (RAM-access address))
	(setq instructionbinV (concatenate-vectors OPcodebinV operandbinV))
	(if (> instructionsize 2)
	  (progn
            (setq PC (increment-double-byte-BE PC))     ; 2nd time for size 3
	    (setq address (present-hexadecimal-BE (binary-to-hexadecimal-BE PC)))
	    (setq operandbinV (RAM-access address))
	    (setq instructionbinV (concatenate-vectors instructionbinV operandbinV))
	    (setq PC (increment-double-byte-BE PC))          ; instructionsize = 3;   3rd time for size 3
	  )
	  (setq PC (increment-double-byte-BE PC))       ; instructionsize = 2;  2nd time for size 2
	)
      )
      (progn 
        (setq PC (increment-double-byte-BE PC))         ; instructionsize = 1;   1st (and only) time for size 1
	(setq instructionbinV (copy-vector OPcodebinV))
      )
    )
    (setq instructionhexV (binary-to-hexadecimal-BE instructionbinV))
    (instruction instructionhexV)            ; interpret the instruction
  )
)


* 3  2022.07.27  flags
#3  23:23
(defun set-sign-flag ()
  (aset F 0 1)
)

(defun reset-sign-flag ()
  (aset F 0 0)
)

(defun toggle-sign-flag ()
  (aset F 0 (- 1 (aref F 0)))
)

(defun what-is-sign-flag ()
  (aref F 0)
)

(defun assign-to-sign-flag (state)
  (aset F 0 state)
)

(defun set-zero-flag ()
  (aset F 1 1)
)

(defun reset-zero-flag ()
  (aset F 1 0)
)

(defun toggle-zero-flag ()
  (aset F 1 1)
)

(defun what-is-zero-flag ()
  (aref F 1)
)

(defun assign-to-zero-flag (state)
  (aset F 1 state)
)

(defun set-parity-flag ()
  (aset F 5 1)
)

(defun reset-parity-flag ()
  (aset F 5 0)
)

(defun toggle-parity-flag ()
  (aset F 5 (- 1 (aref F 5)))
)

(defun what-is-parity-flag ()
  (aref F 5)
)

(defun assign-to-parity-flag (state)
  (aset F 5 state)
)

(defun set-overflow-flag ()
  (aset F 5 1)
)

(defun reset-overflow-flag ()
  (aset F 5 0)
)

(defun toggle-overflow-flag ()
  (aset F 5 (- 1 (aref F 5)))
)

(defun what-is-overflow-flag ()
  (aref F 5)
)

(defun assign-to-overflow-flag (state)
  (aset F 5 state)
)

(defun set-carry-flag ()
  (aset F 7 1)
)

(defun reset-carry-flag ()
  (aset F 7 0)
)

(defun toggle-carry-flag ()
  (aset F 7 (- 1 (aref F 7)))
)

(defun what-is-carry-flag ()
  (aref F 7)
)

(defun assign-to-carry-flag (state)
  (aset F 7 state)
)


* 4  2022.07.29  Ch. 4, Ex. 4 of Za8ALP
#4  16:28  √
(defun ch4ex4 ()
  (RAM-store "4000" [0 0 1 0 1 0 1 0])   ; 2A nN : LHLD BIGA
  (RAM-store "4001" [0 0 1 0 0 0 1 1])   ; 23 = n
  (RAM-store "4002" [0 0 0 1 1 1 1 1])   ; 1F = N
  (RAM-store "4003" [0 1 0 0 0 1 0 0])   ; 44 : MOV B, H
  (RAM-store "4004" [0 1 0 0 1 1 0 1])   ; 4D : MOV C, L
  (RAM-store "4005" [0 0 1 0 1 0 1 0])   ; 2A nN : LHLD BIGB
  (RAM-store "4006" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4007" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "4008" [0 1 1 1 1 1 0 0])   ; 7C : MOV A, H
  (RAM-store "4009" [0 0 1 0 1 1 1 1])   ; 2F : CMA
  (RAM-store "400A" [0 1 1 0 0 1 1 1])   ; 67 : MOV H, A
  (RAM-store "400B" [0 1 1 1 1 1 0 1])   ; 7D : MOV A, L
  (RAM-store "400C" [0 0 1 0 1 1 1 1])   ; 2F : CMA
  (RAM-store "400D" [0 1 1 0 1 1 1 1])   ; 6F : MOV L, A
  (RAM-store "400E" [0 0 1 0 0 0 1 1])   ; 23 : INX H
  (RAM-store "400F" [0 1 1 1 1 0 0 1])   ; 79 : MOV A, C
  (RAM-store "4010" [1 0 0 0 0 1 0 1])   ; 85 : ADD L
  (RAM-store "4011" [0 1 1 1 1 0 0 0])   ; 78 : MOV A, B
  (RAM-store "4012" [1 0 0 0 1 1 0 0])   ; 8C : ADC H
  (RAM-store "4013" [1 1 0 1 0 1 0 0])   ; D4 nN : CNC ABIGR
  (RAM-store "4014" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4015" [0 1 0 0 0 0 0 1])   ; 41 = N
  (RAM-store "4016" [1 1 0 1 1 1 0 0])   ; DC nN : CC BBIGR
  (RAM-store "4017" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4018" [0 1 0 0 0 0 1 0])   ; 42 = N
  (RAM-store "4100" [0 0 0 0 0 0 0 0])   ; 00 : NOP
  (RAM-store "4200" [0 0 0 0 0 0 0 0])   ; 00 : NOP
)


* 5  2022.07.29  Ch. 4, Ex. 5 of Za8ALP
#5  23:19
(defun VXORS ()
  (RAM-store "5000" [1 0 1 0 0 1 1 1])   ; A7 : ANA A
  (RAM-store "5001" [1 1 1 0 0 0 1 0])   ; E2 nN : JNO FIRST
  (RAM-store "5002" [0 0 0 0 0 1 0 1])   ; 05 = n
  (RAM-store "5003" [0 1 0 1 0 0 0 0])   ; 50 = N
  (RAM-store "5004" [0 0 1 1 1 1 1 1])   ; 3F : CMC
  (RAM-store "5005" [1 1 1 1 0 0 1 0])   ; F2 nN : JP SECOND
  (RAM-store "5006" [0 0 0 0 1 0 0 1])   ; 09 = n
  (RAM-store "5007" [0 1 0 1 0 0 0 0])   ; 50 = N
  (RAM-store "5008" [0 0 1 1 1 1 1 1])   ; 3F : CMC
  (RAM-store "5009" [1 1 0 0 1 0 0 1])   ; C9 : RET
)

(defun ch4ex5 ()
  (RAM-store "1F23" [1 1 1 1 1 1 1 0])   ; FF
  (RAM-store "1F24" [0 1 1 1 1 1 1 1])   ; 7F
  (RAM-store "2000" [1 1 1 1 1 1 1 1])   ; FF
  (RAM-store "2001" [1 1 1 1 1 1 1 1])   ; FF
  (RAM-store "4000" [0 0 1 0 1 0 1 0])   ; 2A nN : LHLD BIGA
  (RAM-store "4001" [0 0 1 0 0 0 1 1])   ; 23 = n
  (RAM-store "4002" [0 0 0 1 1 1 1 1])   ; 1F = N
  (RAM-store "4003" [0 1 0 0 0 1 0 0])   ; 44 : MOV B, H
  (RAM-store "4004" [0 1 0 0 1 1 0 1])   ; 4D : MOV C, L
  (RAM-store "4005" [0 0 1 0 1 0 1 0])   ; 2A nN : LHLD BIGB
  (RAM-store "4006" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4007" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "4008" [0 1 1 1 1 1 0 0])   ; 7C : MOV A, H
  (RAM-store "4009" [0 0 1 0 1 1 1 1])   ; 2F : CMA
  (RAM-store "400A" [0 1 1 0 0 1 1 1])   ; 67 : MOV H, A
  (RAM-store "400B" [0 1 1 1 1 1 0 1])   ; 7D : MOV A, L
  (RAM-store "400C" [0 0 1 0 1 1 1 1])   ; 2F : CMA
  (RAM-store "400D" [0 1 1 0 1 1 1 1])   ; 6F : MOV L, A
  (RAM-store "400E" [0 0 1 0 0 0 1 1])   ; 23 : INX H
  (RAM-store "400F" [0 1 1 1 1 0 0 1])   ; 79 : MOV A, C
  (RAM-store "4010" [1 0 0 0 0 1 0 1])   ; 85 : ADD L
  (RAM-store "4011" [0 1 1 1 1 0 0 0])   ; 78 : MOV A, B
  (RAM-store "4012" [1 0 0 0 1 1 0 0])   ; 8C : ADC H
  (RAM-store "4013" [1 1 0 0 1 1 0 1])   ; CD nN : CALL VXORS
  (RAM-store "4014" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4015" [0 1 0 1 0 0 0 0])   ; 50 = N
  (RAM-store "4016" [1 1 0 1 0 1 0 0])   ; D4 nN : CNC ABIGR
  (RAM-store "4017" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4018" [0 1 0 0 0 0 0 1])   ; 41 = N
  (RAM-store "4019" [1 1 0 1 1 1 0 0])   ; DC nN : CC BBIGR
  (RAM-store "401A" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "401B" [0 1 0 0 0 0 1 0])   ; 42 = N
)
(init)
(VXORS)
(ch4ex5)

* 6  2022.07.31  Ch. 4, Ex. 6
#6  17:01  √
(defun ch4ex6 ()
  "Stored program"
  (RAM-store "4000" [0 0 1 1 1 0 1 0])   ; 3A nN : LDA COUNT
  (RAM-store "4001" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4002" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "4003" [0 1 0 0 1 1 1 1])   ; 4F : MOV C, A
  (RAM-store "4004" [0 0 1 0 0 0 0 1])   ; 21 Nn : LXI H, PEOPLE
  (RAM-store "4005" [0 0 1 1 0 0 0 0])   ; N = 30
  (RAM-store "4006" [0 0 0 0 0 0 0 0])   ; n = 00
  (RAM-store "4007" [0 1 1 1 1 0 0 1])   ; 79 : MOV A, C
  (RAM-store "4008" [1 1 1 1 1 1 1 0])   ; FE n : CMI 0
  (RAM-store "4009" [0 0 0 0 0 0 0 0])   ; n = 00
  (RAM-store "400A" [1 1 0 0 1 0 1 0])   ; CA nN : JZ NOSUCH
  (RAM-store "400B" [0 0 1 0 0 0 0 0])   ; 20 = n
  (RAM-store "400C" [0 1 0 0 0 0 0 0])   ; 40 = N
  (RAM-store "400D" [0 1 1 1 1 1 1 0])   ; 7E : MOV A, M
  (RAM-store "400E" [1 1 1 1 1 1 1 0])   ; FE n : CPI FAH
  (RAM-store "400F" [1 1 1 1 1 0 1 0])   ; FA = n
  (RAM-store "4010" [1 1 0 0 1 0 1 0])   ; CA nN : JZ PREJUMP
  (RAM-store "4011" [0 0 0 1 1 0 1 0])   ; 1A = n
  (RAM-store "4012" [0 1 0 0 0 0 0 0])   ; 40 = N
  (RAM-store "4013" [0 0 1 0 0 0 1 1])   ; 23 : INX H
  (RAM-store "4014" [0 0 1 0 0 0 1 1])   ; 23 : INX H
  (RAM-store "4015" [0 0 1 0 0 0 1 1])   ; 23 : INX H
  (RAM-store "4016" [0 0 0 0 1 1 0 1])   ; 0D : DCR C
  (RAM-store "4017" [1 1 0 0 0 0 1 1])   ; C3 nN : JMP LOOP
  (RAM-store "4018" [0 0 0 0 0 1 1 1])   ; 07 = n
  (RAM-store "4019" [0 1 0 0 0 0 0 0])   ; 40 = N
  (RAM-store "401A" [0 0 1 0 0 0 1 1])   ; 23 : INX H
  (RAM-store "401B" [0 1 0 1 1 1 1 0])   ; 5E : MOV E, M
  (RAM-store "401C" [0 0 1 0 0 0 1 1])   ; 23 : INX H
  (RAM-store "401D" [0 1 0 1 0 1 1 0])   ; 56 : MOV D, M
  (RAM-store "401E" [1 1 1 0 1 0 1 1])   ; EB : XCHG
  (RAM-store "401F" [1 1 1 0 1 0 0 1])   ; E9 : PCHL
  (RAM-store "4020" [0 0 0 0 0 0 0 0])   ; 00 : NOP
  (RAM-store "5000" [0 0 0 0 0 0 0 0])
  (RAM-store "5100" [0 0 0 0 0 0 0 0])
  (RAM-store "5200" [0 0 0 0 0 0 0 0])
  (RAM-store "5300" [0 0 0 0 0 0 0 0])
  (RAM-store "5400" [0 0 0 0 0 0 0 0])
  (RAM-store "5500" [0 0 0 0 0 0 0 0])
  "Data"
  (RAM-store "2000" [0 0 0 0 0 1 1 0])   ; 06 ] COUNT
  (RAM-store "3000" [1 1 1 1 0 0 1 1])   ; F3 ]] PEOPLE
  (RAM-store "3001" [0 0 0 0 0 0 0 0])   ; 00
  (RAM-store "3002" [0 1 0 1 0 0 0 0])   ; 50
  (RAM-store "3003" [0 0 1 1 0 1 0 0])
  (RAM-store "3004" [0 0 0 0 0 0 0 0])   ; 00
  (RAM-store "3005" [0 1 0 1 0 0 0 1])   ; 51
  ;(RAM-store "3006" [1 1 1 1 1 0 1 0])   ; FA
  (RAM-store "3006"  [1 1 1 1 1 0 1 1])   ; FB
  (RAM-store "3007" [0 0 0 0 0 0 0 0])   ; 00
  (RAM-store "3008" [0 1 0 1 0 0 1 0])   ; 52
  (RAM-store "3009" [0 1 1 0 0 1 0 1])
  (RAM-store "300A" [0 0 0 0 0 0 0 0])   ; 00
  (RAM-store "300B" [0 1 0 1 0 0 1 1])   ; 53
  (RAM-store "300C" [1 0 0 0 1 0 1 0])
  (RAM-store "300D" [0 0 0 0 0 0 0 0])   ; 00
  (RAM-store "300E" [0 1 0 1 0 1 0 0])   ; 54
  (RAM-store "300F" [0 1 0 1 0 0 0 1])
  (RAM-store "3010" [0 0 0 0 0 0 0 0])   ; 00
  (RAM-store "3011" [0 1 0 1 0 1 0 1])   ; 55
)

(init)
(ch4ex6)


* 7  2022.08.02  Ch. 5, Ex. 1
#7  16:52 √
(defun ch5ex1 ()
  "Subroutine MULTIP for multiplying two bytes (unsigned)."
  (RAM-store "4000" [1 1 1 1 0 1 0 1])   ; F5 : PUSH PSW
  (RAM-store "4001" [1 1 0 0 0 1 0 1])   ; C5 : PUSH B
  (RAM-store "4002" [1 1 0 1 0 1 0 1])   ; D5 : PUSH D
  (RAM-store "4003" [1 1 1 0 0 1 0 1])   ; E5 : PUSH H
  (RAM-store "4004" [0 0 1 1 1 0 1 0])   ; 3A nN : LDA MLTPLR
  (RAM-store "4005" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4006" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "4007" [0 1 0 0 1 1 1 1])   ; 4F : MOV C, A
  (RAM-store "4008" [0 0 1 1 1 0 1 0])   ; 3A nN : LDA MLTCND
  (RAM-store "4009" [0 0 0 0 0 0 0 1])   ; 01 = n
  (RAM-store "400A" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "400B" [0 1 0 1 0 1 1 1])   ; 57 : MOV D, A
  (RAM-store "400C" [0 0 0 0 0 1 1 0])   ; 06 n : MVI B, 00H
  (RAM-store "400D" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "400E" [0 0 0 1 1 1 1 0])   ; 1E n : MVI E, 08H
  (RAM-store "400F" [0 0 0 0 1 0 0 0])   ; 08 = n
  (RAM-store "4010" [0 1 1 1 1 0 1 1])   ; 7B : MOV A, E  :: LOOP
  (RAM-store "4011" [1 1 1 1 1 1 1 0])   ; FE n : CPI 00H
  (RAM-store "4012" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4013" [1 1 0 0 1 0 1 0])   ; CA nN : JZ EXIT
  (RAM-store "4014" [0 0 1 0 1 0 1 0])   ; n = 2A
  (RAM-store "4015" [0 1 0 0 0 0 0 0])   ; N = 40
  (RAM-store "4016" [0 1 1 1 1 0 0 1])   ; 79 : MOV A, C
  (RAM-store "4017" [1 1 1 0 0 1 1 0])   ; E6 n : ANI 01H
  (RAM-store "4018" [0 0 0 0 0 0 0 1])   ; 01 = n
  (RAM-store "4019" [1 1 0 0 1 0 1 0])   ; CA nN : JZ NOTSET
  (RAM-store "401A" [0 0 0 1 1 1 1 1])   ; 1F = n
  (RAM-store "401B" [0 1 0 0 0 0 0 0])   ; 40 = N
  (RAM-store "401C" [0 1 1 1 1 0 0 0])   ; 78 : MOV A, B
  (RAM-store "401D" [1 0 0 0 0 0 1 0])   ; 82 : ADD D
  (RAM-store "401E" [0 1 0 0 0 1 1 1])   ; 47 : MOV B, A
  (RAM-store "401F" [0 1 1 1 1 0 0 0])   ; 78 : MOV A, B  :: NOTSET
  (RAM-store "4020" [1 0 1 0 0 1 1 1])   ; A7 : ANA A
  (RAM-store "4021" [0 0 0 1 1 1 1 1])   ; 1F : RAR
  (RAM-store "4022" [0 1 0 0 0 1 1 1])   ; 47 : MOV B, A
  (RAM-store "4023" [0 1 1 1 1 0 0 1])   ; 79 : MOV A, C
  (RAM-store "4024" [0 0 0 1 1 1 1 1])   ; 1F : RAR
  (RAM-store "4025" [0 1 0 0 1 1 1 1])   ; 4F : MOV C, A
  (RAM-store "4026" [0 0 0 1 1 1 0 1])   ; 1D : DCR E
  (RAM-store "4027" [1 1 0 0 0 0 1 1])   ; C3 nN : JMP LOOP
  (RAM-store "4028" [0 0 0 1 0 0 0 0])   ; 10 = n
  (RAM-store "4029" [0 1 0 0 0 0 0 0])   ; 40 = N
  (RAM-store "402A" [0 1 1 0 0 0 0 0])   ; 60 : MOV H, B   :: EXIT
  (RAM-store "402B" [0 1 1 0 1 0 0 1])   ; 69 : MOV L, C
  (RAM-store "402C" [0 0 1 0 0 0 1 0])   ; 22 nN : SHLD PRODCT
  (RAM-store "402D" [0 0 0 0 0 0 1 0])   ; 02 = n
  (RAM-store "402E" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "402F" [1 1 1 0 0 0 0 1])   ; E1 : POP H
  (RAM-store "4030" [1 1 0 1 0 0 0 1])   ; D1 : POP D
  (RAM-store "4031" [1 1 0 0 0 0 0 1])   ; C1 : POP B
  (RAM-store "4032" [1 1 1 1 0 0 0 1])   ; F1 : POP PSW
  (RAM-store "4033" [1 1 0 0 1 0 0 1])   ; C9 : RET
  "Data"
  (RAM-store "2000" [0 0 0 0 0 1 0 1])   ; 05 = MLTPLR
  (RAM-store "2001" [0 1 1 0 0 1 1 1])   ; 67 = MLTCND
)

(init)
(ch5ex1)


* 8  2022.08.03  Ch. 5, Ex. 2
#8  14:50
(defun ch5ex2 ()
  "Subroutine MULTIS for multiplying two bytes (signed)."
  (RAM-store "4100" [1 1 1 1 0 1 0 1])   ; F5 : PUSH PSW
  (RAM-store "4101" [1 1 0 0 0 1 0 1])   ; C5 : PUSH B
  (RAM-store "4102" [1 1 0 1 0 1 0 1])   ; D5 : PUSH D
  (RAM-store "4103" [1 1 1 0 0 1 0 1])   ; E5 : PUSH H
  (RAM-store "4104" [0 0 1 1 1 0 1 0])   ; 3A nN : LDA MLTPLR
  (RAM-store "4105" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4106" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "4107" [0 1 0 0 0 1 1 1])   ; 47 : MOV B, A
  (RAM-store "4108" [0 0 1 1 1 0 1 0])   ; 3A nN : LDA MLTCND
  (RAM-store "4109" [0 0 0 0 0 0 0 1])   ; 01 = n
  (RAM-store "410A" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "410B" [0 1 0 0 1 1 1 1])   ; 4F : MOV C, A
  (RAM-store "410C" [0 1 1 1 1 0 0 0])   ; 78 : MOV A, B
  (RAM-store "410D" [1 1 1 0 0 1 1 0])   ; E6 n : ANI 80H
  (RAM-store "410E" [1 0 0 0 0 0 0 0])   ; 80 = n
  (RAM-store "410F" [0 1 0 1 0 1 1 1])   ; 57 : MOV D, A
  (RAM-store "4110" [0 1 1 1 1 0 0 1])   ; 79 : MOV A, C
  (RAM-store "4111" [1 1 1 0 0 1 1 0])   ; E6 n : ANI 80H
  (RAM-store "4112" [1 0 0 0 0 0 0 0])   ; 80 = n
  (RAM-store "4113" [0 1 0 1 1 1 1 1])   ; 5F : MOV E, A
  (RAM-store "4114" [0 1 1 1 1 0 1 0])   ; 7A : MOV A, D
  (RAM-store "4115" [1 1 1 1 1 1 1 0])   ; FE n : CPI 00H
  (RAM-store "4116" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4117" [1 1 0 0 1 0 1 0])   ; CA nN : JZ SKIPA
  (RAM-store "4118" [0 0 0 1 1 1 1 0])   ; 1E = n
  (RAM-store "4119" [0 1 0 0 0 0 0 1])   ; 41 = N
  (RAM-store "411A" [0 1 1 1 1 0 0 0])   ; 78 : MOV A, B
  (RAM-store "411B" [0 0 1 0 1 1 1 1])   ; 2F : CMA
  (RAM-store "411C" [0 0 1 1 1 1 0 1])   ; 3D : INR A
  (RAM-store "411D" [0 1 0 0 0 1 1 1])   ; 47 : MOV B, A
  (RAM-store "411E" [0 1 1 1 1 0 1 1])   ; 7B : MOV A, E
  (RAM-store "411F" [1 1 1 1 1 1 1 0])   ; FE n : CPI 00H
  (RAM-store "4120" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4121" [1 1 0 0 1 0 1 0])   ; CA nN : JZ SKIPB
  (RAM-store "4122" [0 0 1 0 1 0 0 0])   ; 28 = n
  (RAM-store "4123" [0 1 0 0 0 0 0 1])   ; 41 = N
  (RAM-store "4124" [0 1 1 1 1 0 0 1])   ; 79 : MOV A, C
  (RAM-store "4125" [0 0 1 0 1 1 1 1])   ; 2F : CMA
  (RAM-store "4126" [0 0 1 1 1 1 0 1])   ; 3D : INR A
  (RAM-store "4127" [0 1 0 0 1 1 1 1])   ; 4F : MOV C, A
  (RAM-store "4128" [0 1 1 1 1 0 0 0])   ; 78 : MOV A, B
  (RAM-store "4129" [0 0 1 1 0 0 1 0])   ; 32 nN : STA MLTPLR
  (RAM-store "412A" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "412B" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "412C" [0 1 1 1 1 0 0 1])   ; 79 : MOV A, C
  (RAM-store "412D" [0 0 1 1 0 0 1 0])   ; 32 nN : STA MLTCND
  (RAM-store "412E" [0 0 0 0 0 0 0 1])   ; 01 = n
  (RAM-store "412F" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "4130" [1 1 0 0 1 1 0 1])   ; CD nN : CALL MULTIP
  (RAM-store "4131" [0 0 0 0 0 0 0 0])   ; 00 = n
  (RAM-store "4132" [0 1 0 0 0 0 0 0])   ; 40 = N
  (RAM-store "4133" [0 0 1 0 1 0 1 0])   ; 2A nN : LHLD PRODCT
  (RAM-store "4134" [0 0 0 0 0 0 1 0])   ; 02 = n
  (RAM-store "4135" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "4136" [0 1 1 1 1 0 1 0])   ; 7A : MOV A, D
  (RAM-store "4137" [1 0 1 0 1 0 1 1])   ; AB : XRA E
  (RAM-store "4138" [1 1 0 0 1 0 1 0])   ; CA nN : JZ SKIPC
  (RAM-store "4139" [0 1 0 0 0 0 1 0])   ; 42 = n
  (RAM-store "413A" [0 1 0 0 0 0 0 1])   ; 41 = N
  (RAM-store "413B" [0 1 1 1 1 1 0 0])   ; 7C : MOV A, H
  (RAM-store "413C" [0 0 1 0 1 1 1 1])   ; 2F : CMA
  (RAM-store "413D" [0 1 1 0 0 1 1 1])   ; 67 : MOV H, A
  (RAM-store "413E" [0 1 1 1 1 1 0 1])   ; 7D : MOV A, L
  (RAM-store "413F" [0 0 1 0 1 1 1 1])   ; 2F : CMA
  (RAM-store "4140" [0 1 1 0 1 1 1 1])   ; 6F : MOV L, A
  (RAM-store "4141" [0 0 1 0 0 0 1 1])   ; 23 : INX H
  (RAM-store "4142" [0 0 1 0 0 0 1 0])   ; 22 nN : SHLD PRODCT
  (RAM-store "4143" [0 0 0 0 0 0 1 0])   ; 02 = n
  (RAM-store "4144" [0 0 1 0 0 0 0 0])   ; 20 = N
  (RAM-store "4145" [1 1 1 0 0 0 0 1])   ; E1 : POP H
  (RAM-store "4146" [1 1 0 1 0 0 0 1])   ; D1 : POP D
  (RAM-store "4147" [1 1 0 0 0 0 0 1])   ; C1 : POP B
  (RAM-store "4148" [1 1 1 1 0 0 0 1])   ; F1 : POP PS
					; Data
  (RAM-store "2000" [1 1 0 1 0 1 1 1])   ; D7 = -41
  (RAM-store "2001" [1 0 1 1 1 1 0 1])   ; BD = -67
  ; -41 x -67 = 2741
)

(init)
(ch5ex1)
(ch5ex2)

* Sandbox
(init)
A
(exec)
A
(exec)
H = 6F
L = 32
A = 00
(exec)
A = 02
(exec)
H = 6F
L = 33
(exec)
(numerical-vector-to-string PC) = 4004
(exec)
A = 05
(exec)
H = 6F
L = 34
(exec)
(numerical-vector-to-string PC) = 4004
(exec)
A = 09
(exec)
H = 6F
L = 35
(exec)
(exec)
A = 0E

(init)
(exec)
A = 00
(exec)
H = 6F
L = 32
(exec)
B = 5
(exec)
A = 02
(exec)
H
L = 33
(exec)
B = 04
zero = 0
(exec)
(exec)
A = 05
(exec)
L = 34
(exec)
B = 3
zero = 0
(exec)
(exec)
A = 09
(exec)
L = 35
(exec)
B = 02
zero = 0
(exec)
(exec)
A = 0E
(exec)
L = 36
(exec)
B = 01
(exec)
(exec)
A = 14
(exec)
L = 37
(exec)
zero
B = 00
(exec)
(numerical-vector-to-string PC) = 400C  √

(init)
(exec)
A = 00
(exec)
H = 6F
L = 32
(exec)
B = 05
(exec)
C = 00
(exec)
A = 05
(exec)
zero = 0
(exec)
A = 00
(exec)
(exec)
A = 02
(exec)
L = 33
(exec)
B = 04
(exec)
(exec)
C = 02
(exec)
A = 04
(exec)
zero = 0
(exec)
A = 02
(exec)
(exec)
A = 05
(exec)
L = 34
(exec)
B = 03
(exec)
(exec)
C = 05
(exec)
A = 03
(exec)
(exec)
A = 05
(exec)
(exec)
A = 09
(exec)
(exec)
B = 02
(exec)
(exec)
C = 09
(exec)
A = 02
(exec)
zero = 0
(exec)
A = 09
(exec)
(exec)
A = 0E
(exec)
L = 36
(exec)
B = 01
(exec)
(exec)
C = 0E
(exec)
A = 01
(exec)
zero = 0
(exec)
A = 0E
(exec)
(exec)
A = 14
(exec)
L = 37
(exec)
B = 00
(exec)
(exec)
C = 14
(exec)
A = 00
(exec)
zero = 1
(exec)
A = 14h = 20d
(exec)
(exec) √

(init)
(what-is-overflow-flag)
(what-is-sign-flag)
(exec)
A
(what-is-carry-flag)
(what-is-overflow-flag)
(what-is-sign-flag)
(exec)
(exec)
(exec)
(exec)


(init)
(exec)
(print-PC)[0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 1]
(defun print-PC ()
  (insert (numerical-vector-to-string PC))
)
(defun print-SP ()
  (insert (numerical-vector-to-string SP))
)

(init)
(ch4ex4)√

; Dashboard
(exec)
A
F
B
C
D
E
H
L
(print-SP)
(print-PC)[0 1 0 0 0 0 0 1 0 0 1 1 0 1 1 0]
(setq PC  [0 1 0 0 0 0 0 1 0 0 1 1 0 1 1 1])
(RAM-access "2002")
(RAM-access "2003")
(RAM-store "4137" [1 0 1 0 1 0 1 1])
(setq A [1 0 0 0 0 0 0 0])
(setq H [0 0 1 0 0 0 0 0])
(setq L [0 0 0 0 0 0 0 1])
(instruction [4 6])
(report-flags)

(random-byte)

* See also
(emacs-wiki-mode)
- [[binary numbers]] (proto-header file)
- [[bytes]] (proto-header file)
- [[hexadecimal numbers]] (proto-header file)
- [[vectors]] (proto-header file, from Zettel 3 on down)
- [[associative arrays]]
