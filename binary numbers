(lisp-interaction-mode)

* 1  2022.07.21  for a computer: how to convert a binary number to decimal
#1  16:30  Separate the number into integral and digital-fractional parts.

For the integral part: divide by 1010 and take note of the remainder. Then divide the (integral) quotient by 1010 and take note of the remainder, and so on. Build up the integral part of the converted number (in decimal) from the bottom up by stacking the remainders, which are decimal digits (in binary-coded decimal; it should take at least a nibble per digit).

For the fractional part: multiply by 1010 and take note of the resulting integral part. Then cut off the integral part and repeat: multiply by 1010 and take note of the resulting integral part; then cut off the integral part and repeat. Build the decimal-fractional part of converted number from the top down by appending one-digit integral parts. (These are decimal digits, which would be encoded in binary using binary coded decimal).


* 2  2022.07.24  for a human: how to convert a binary number to decimal
#2  13:04
(defun binary-integer-to-decimal (nV)
  "nV should be a vector of bits ordered from least significant to most significant. This is human-style conversion, not machine-language-style."
  (let (i bit sum)
    (setq i 0)
    (setq sum 0)
    (while (< i (length nV))
      (setq bit (aref nV i))
      (setq sum (+ sum (* bit (expt 2 i))))
      (setq i (+ i 1))
    )
    sum
  )
)

(defun binary-to-decimal (nV)
  (binary-integer-to-decimal nV)
)


* 3  2022.07.24  
#3  16:09
(defun decimal-to-binary (n)
  (let (binV quotient remainder i binnumlen)
    (setq binnumlen (floor (+ (/ (log n) (log 2)) 1.0)))
    (setq binV (make-vector binnumlen 0))
    (setq quotient n)
    (setq i 0)
    (while (> quotient 0)
      (setq remainder (% quotient 2))
      (setq quotient (/ quotient 2))
      (aset binV i remainder)
      (setq i (+ i 1))
    )
    binV
  )
)

(defun decimal-to-byte (n)
  (let (binV quotient remainder i binnumlen)
    (setq binnumlen 8)
    (setq binV (make-vector binnumlen 0))
    (setq quotient n)
    (setq i 0)
    (while (> quotient 0)
      (setq remainder (% quotient 2))
      (setq quotient (/ quotient 2))
      (aset binV i remainder)
      (setq i (+ i 1))
    )
    binV
  )
)


* 4  2022.07.24  one's complement
#4  16:16
(defun ones-complement (byte)
  (let (newbyte i bit)
    (setq newbyte (make-vector 8 0))
    (setq i 0)
    (while (< i 8)
      (setq bit (aref byte i))
      (aset newbyte i (- 1 bit))
      (setq i (+ i 1))
    )
    newbyte
  )
)

(ones-complement [0 1 1 0 1 1 0 0])

* 5  2022.07.24  add bytes
#5  16:50
(defun add-bytes (byte1 byte2)               ; Little Endian
  "byte1 and byte2 are vectors of bits, LSB first (Little Endian)."
  (let (byte3 i carrybit bit1 bit2 bitsum bit3 top1 top2)
    (setq i 0)
    (setq carrybit 0)
    (setq byte3 (make-vector 8 0))
    (setq top1 (aref byte1 7))
    (setq top2 (aref byte2 7))
    (while (< i 8)
      (setq bit1 (aref byte1 i))
      (setq bit2 (aref byte2 i))
      (setq bitsum (+ bit1 bit2 carrybit))
      (setq bit3 (% bitsum 2))
      (if (>= bitsum 2)
	(setq carrybit 1)
	(setq carrybit 0)
      )
      (aset byte3 i bit3)
      (setq i (+ i 1))
    )
    ;(setq carry carrybit)
    (assign-to-carry-flag carrybit)
    (if (= top1 top2)
      (let (top3)
	(setq top3 (aref byte3 7))
        (if (= top1 top3)
	  (reset-overflow-flag)
	  (set-overflow-flag)
	)
      )
    )
    byte3
  )
)
See also: [[bytes#3]] .

* 6  2022.07.24  binary to string
#6  16:56
(defun binary-to-string (poly)
  "poly must be a vector of bits, starting with LSB."
  (let (str i component)
    (setq str "[")
    (setq i 0)
    (while (< i (length poly))
      (setq component (aref poly i))
      (setq str (concat str (number-to-string component)))
      (setq i (+ i 1))
      (if (< i (length poly))
        (setq str (concat str " "))
      )
    )  ; end while
    (setq str (concat str "]"))
    str
  )
)

* See also
- [[bytes]]
- [[hexadecimal numbers]]
